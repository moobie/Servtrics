{
  "{\"sourceRoot\":\"/home/rogerio/Repositories/node-metrics/src\",\"caller\":{\"name\":\"@babel/node\"},\"cwd\":\"/home/rogerio/Repositories/node-metrics\",\"filename\":\"/home/rogerio/Repositories/node-metrics/src/index.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/home/rogerio/Repositories/node-metrics\",\"plugins\":[{\"key\":\"syntax-dynamic-import\",\"visitor\":{},\"options\":{}},{\"key\":\"syntax-import-meta\",\"visitor\":{},\"options\":{}},{\"key\":\"proposal-class-properties\",\"visitor\":{\"PrivateName\":{\"enter\":[null]},\"ExportDefaultDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"proposal-decorators\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]}},\"options\":{\"legacy\":true}},{\"key\":\"proposal-function-sent\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"MetaProperty\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"proposal-export-namespace-from\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"ExportNamedDeclaration\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"proposal-numeric-separator\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"NumericLiteral\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"proposal-throw-expressions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"UnaryExpression\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"loose\":false}},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"BlockStatement\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_verified\":true,\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"regenerator-transform\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ObjectMethod\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]},\"ClassMethod\":{\"exit\":[null]},\"ClassPrivateMethod\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-async-generator-functions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-catch-binding\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.2.2": {
    "metadata": {},
    "options": {
      "sourceRoot": "/home/rogerio/Repositories/node-metrics/src",
      "caller": {
        "name": "@babel/node"
      },
      "cwd": "/home/rogerio/Repositories/node-metrics",
      "filename": "/home/rogerio/Repositories/node-metrics/src/index.js",
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/home/rogerio/Repositories/node-metrics",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "syntax-dynamic-import",
          "visitor": {
            "_exploded": true,
            "_verified": true
          },
          "options": {}
        },
        {
          "key": "syntax-import-meta",
          "visitor": {
            "_exploded": true,
            "_verified": true
          },
          "options": {}
        },
        {
          "key": "proposal-class-properties",
          "visitor": {
            "PrivateName": {
              "enter": [
                null
              ]
            },
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "proposal-decorators",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "legacy": true
          }
        },
        {
          "key": "proposal-function-sent",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "MetaProperty": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "proposal-export-namespace-from",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "proposal-numeric-separator",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "NumericLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "proposal-throw-expressions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "UnaryExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "loose": false
          }
        },
        {
          "key": "transform-template-literals",
          "visitor": {
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "TemplateLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-literals",
          "visitor": {
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-function-name",
          "visitor": {
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-arrow-functions",
          "visitor": {
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoped-functions",
          "visitor": {
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchCase": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-classes",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-object-super",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-shorthand-properties",
          "visitor": {
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-duplicate-keys",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-computed-properties",
          "visitor": {
            "ObjectExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-for-of",
          "visitor": {
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-sticky-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-dotall-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-spread",
          "visitor": {
            "ArrayExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-parameters",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-destructuring",
          "visitor": {
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoping",
          "visitor": {
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_verified": true,
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-typeof-symbol",
          "visitor": {
            "UnaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-new-target",
          "visitor": {
            "MetaProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "regenerator-transform",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "exit": [
                null
              ]
            },
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectMethod": {
              "exit": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "exit": [
                null
              ]
            },
            "ClassMethod": {
              "exit": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "exit": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-exponentiation-operator",
          "visitor": {
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-async-to-generator",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-async-generator-functions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-unicode-property-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-catch-binding",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CatchClause": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-named-capturing-groups-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/home/rogerio/Repositories/node-metrics/src/index.js",
        "plugins": [
          "dynamicImport",
          "importMeta",
          "classProperties",
          "classPrivateProperties",
          "jsonStrings",
          "decorators-legacy",
          "functionSent",
          "exportNamespaceFrom",
          "numericSeparator",
          "throwExpressions",
          "asyncGenerators",
          "objectRestSpread",
          "jsonStrings",
          "optionalCatchBinding"
        ]
      },
      "generatorOpts": {
        "filename": "/home/rogerio/Repositories/node-metrics/src/index.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/home/rogerio/Repositories/node-metrics/src",
        "sourceFileName": "index.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nvar _express = _interopRequireDefault(require(\"express\"));\n\nvar _http = _interopRequireDefault(require(\"http\"));\n\nvar _bodyParser = _interopRequireDefault(require(\"body-parser\"));\n\nvar _NodeMetrics = _interopRequireDefault(require(\"./NodeMetrics\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar app = (0, _express.default)();\n\n_http.default.createServer(app).listen(3001, function () {\n  console.log('Listening on port 3001');\n});\n\n_NodeMetrics.default.connect('localhost').then(function (r) {\n  return console.log(r);\n});\n\napp.use(_bodyParser.default.json());\napp.use(_NodeMetrics.default.expressMetricsMiddleware);\napp.get('/', function (req, res) {\n  setTimeout(function () {\n    return res.end('Hello world!');\n  }, Math.random() * 500);\n});\napp.post('/', function (req, res) {\n  setTimeout(function () {\n    return res.end('Hello world!');\n  }, Math.random() * 500);\n});\napp.get('/e', function (req, res) {\n  setTimeout(function () {\n    return res.status(500).send('Hello world!');\n  }, Math.random() * 500);\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sIm5hbWVzIjpbImFwcCIsImh0dHAiLCJjcmVhdGVTZXJ2ZXIiLCJsaXN0ZW4iLCJjb25zb2xlIiwibG9nIiwiTm9kZU1ldHJpY3MiLCJjb25uZWN0IiwidGhlbiIsInIiLCJ1c2UiLCJib2R5UGFyc2VyIiwianNvbiIsImV4cHJlc3NNZXRyaWNzTWlkZGxld2FyZSIsImdldCIsInJlcSIsInJlcyIsInNldFRpbWVvdXQiLCJlbmQiLCJNYXRoIiwicmFuZG9tIiwicG9zdCIsInN0YXR1cyIsInNlbmQiXSwibWFwcGluZ3MiOiI7O0FBQUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7Ozs7QUFFQSxJQUFNQSxHQUFHLEdBQUcsdUJBQVo7O0FBRUFDLGNBQUtDLFlBQUwsQ0FBa0JGLEdBQWxCLEVBQXVCRyxNQUF2QixDQUE4QixJQUE5QixFQUFvQyxZQUFZO0FBQzVDQyxFQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBWSx3QkFBWjtBQUNELENBRkg7O0FBSUFDLHFCQUFZQyxPQUFaLENBQW9CLFdBQXBCLEVBQWlDQyxJQUFqQyxDQUFzQyxVQUFBQyxDQUFDO0FBQUEsU0FBRUwsT0FBTyxDQUFDQyxHQUFSLENBQVlJLENBQVosQ0FBRjtBQUFBLENBQXZDOztBQUVBVCxHQUFHLENBQUNVLEdBQUosQ0FBUUMsb0JBQVdDLElBQVgsRUFBUjtBQUNBWixHQUFHLENBQUNVLEdBQUosQ0FBUUoscUJBQVlPLHdCQUFwQjtBQUVBYixHQUFHLENBQUNjLEdBQUosQ0FBUSxHQUFSLEVBQWEsVUFBVUMsR0FBVixFQUFlQyxHQUFmLEVBQW9CO0FBQzdCQyxFQUFBQSxVQUFVLENBQUM7QUFBQSxXQUFNRCxHQUFHLENBQUNFLEdBQUosQ0FBUSxjQUFSLENBQU47QUFBQSxHQUFELEVBQWdDQyxJQUFJLENBQUNDLE1BQUwsS0FBZ0IsR0FBaEQsQ0FBVjtBQUNILENBRkQ7QUFJQXBCLEdBQUcsQ0FBQ3FCLElBQUosQ0FBUyxHQUFULEVBQWMsVUFBVU4sR0FBVixFQUFlQyxHQUFmLEVBQW9CO0FBQzlCQyxFQUFBQSxVQUFVLENBQUM7QUFBQSxXQUFNRCxHQUFHLENBQUNFLEdBQUosQ0FBUSxjQUFSLENBQU47QUFBQSxHQUFELEVBQWdDQyxJQUFJLENBQUNDLE1BQUwsS0FBZ0IsR0FBaEQsQ0FBVjtBQUNILENBRkQ7QUFJQXBCLEdBQUcsQ0FBQ2MsR0FBSixDQUFRLElBQVIsRUFBYyxVQUFVQyxHQUFWLEVBQWVDLEdBQWYsRUFBb0I7QUFDOUJDLEVBQUFBLFVBQVUsQ0FBQztBQUFBLFdBQU1ELEdBQUcsQ0FBQ00sTUFBSixDQUFXLEdBQVgsRUFBZ0JDLElBQWhCLENBQXFCLGNBQXJCLENBQU47QUFBQSxHQUFELEVBQTZDSixJQUFJLENBQUNDLE1BQUwsS0FBZ0IsR0FBN0QsQ0FBVjtBQUNILENBRkQiLCJzb3VyY2VSb290IjoiL2hvbWUvcm9nZXJpby9SZXBvc2l0b3JpZXMvbm9kZS1tZXRyaWNzL3NyYyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBleHByZXNzIGZyb20gJ2V4cHJlc3MnXG5pbXBvcnQgaHR0cCBmcm9tICdodHRwJ1xuaW1wb3J0IGJvZHlQYXJzZXIgZnJvbSAnYm9keS1wYXJzZXInXG5pbXBvcnQgTm9kZU1ldHJpY3MgZnJvbSAnLi9Ob2RlTWV0cmljcydcblxuY29uc3QgYXBwID0gZXhwcmVzcygpXG5cbmh0dHAuY3JlYXRlU2VydmVyKGFwcCkubGlzdGVuKDMwMDEsIGZ1bmN0aW9uICgpIHtcbiAgICBjb25zb2xlLmxvZygnTGlzdGVuaW5nIG9uIHBvcnQgMzAwMScpXG4gIH0pXG5cbk5vZGVNZXRyaWNzLmNvbm5lY3QoJ2xvY2FsaG9zdCcpLnRoZW4ocj0+Y29uc29sZS5sb2cocikpXG5cbmFwcC51c2UoYm9keVBhcnNlci5qc29uKCkpXG5hcHAudXNlKE5vZGVNZXRyaWNzLmV4cHJlc3NNZXRyaWNzTWlkZGxld2FyZSlcbiAgXG5hcHAuZ2V0KCcvJywgZnVuY3Rpb24gKHJlcSwgcmVzKSB7XG4gICAgc2V0VGltZW91dCgoKSA9PiByZXMuZW5kKCdIZWxsbyB3b3JsZCEnKSwgTWF0aC5yYW5kb20oKSAqIDUwMClcbn0pXG5cbmFwcC5wb3N0KCcvJywgZnVuY3Rpb24gKHJlcSwgcmVzKSB7XG4gICAgc2V0VGltZW91dCgoKSA9PiByZXMuZW5kKCdIZWxsbyB3b3JsZCEnKSwgTWF0aC5yYW5kb20oKSAqIDUwMClcbn0pXG5cbmFwcC5nZXQoJy9lJywgZnVuY3Rpb24gKHJlcSwgcmVzKSB7XG4gICAgc2V0VGltZW91dCgoKSA9PiByZXMuc3RhdHVzKDUwMCkuc2VuZCgnSGVsbG8gd29ybGQhJyksIE1hdGgucmFuZG9tKCkgKiA1MDApXG59KSJdfQ==",
    "map": {
      "version": 3,
      "sources": [
        "index.js"
      ],
      "names": [
        "app",
        "http",
        "createServer",
        "listen",
        "console",
        "log",
        "NodeMetrics",
        "connect",
        "then",
        "r",
        "use",
        "bodyParser",
        "json",
        "expressMetricsMiddleware",
        "get",
        "req",
        "res",
        "setTimeout",
        "end",
        "Math",
        "random",
        "post",
        "status",
        "send"
      ],
      "mappings": ";;AAAA;;AACA;;AACA;;AACA;;;;AAEA,IAAMA,GAAG,GAAG,uBAAZ;;AAEAC,cAAKC,YAAL,CAAkBF,GAAlB,EAAuBG,MAAvB,CAA8B,IAA9B,EAAoC,YAAY;AAC5CC,EAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ;AACD,CAFH;;AAIAC,qBAAYC,OAAZ,CAAoB,WAApB,EAAiCC,IAAjC,CAAsC,UAAAC,CAAC;AAAA,SAAEL,OAAO,CAACC,GAAR,CAAYI,CAAZ,CAAF;AAAA,CAAvC;;AAEAT,GAAG,CAACU,GAAJ,CAAQC,oBAAWC,IAAX,EAAR;AACAZ,GAAG,CAACU,GAAJ,CAAQJ,qBAAYO,wBAApB;AAEAb,GAAG,CAACc,GAAJ,CAAQ,GAAR,EAAa,UAAUC,GAAV,EAAeC,GAAf,EAAoB;AAC7BC,EAAAA,UAAU,CAAC;AAAA,WAAMD,GAAG,CAACE,GAAJ,CAAQ,cAAR,CAAN;AAAA,GAAD,EAAgCC,IAAI,CAACC,MAAL,KAAgB,GAAhD,CAAV;AACH,CAFD;AAIApB,GAAG,CAACqB,IAAJ,CAAS,GAAT,EAAc,UAAUN,GAAV,EAAeC,GAAf,EAAoB;AAC9BC,EAAAA,UAAU,CAAC;AAAA,WAAMD,GAAG,CAACE,GAAJ,CAAQ,cAAR,CAAN;AAAA,GAAD,EAAgCC,IAAI,CAACC,MAAL,KAAgB,GAAhD,CAAV;AACH,CAFD;AAIApB,GAAG,CAACc,GAAJ,CAAQ,IAAR,EAAc,UAAUC,GAAV,EAAeC,GAAf,EAAoB;AAC9BC,EAAAA,UAAU,CAAC;AAAA,WAAMD,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,cAArB,CAAN;AAAA,GAAD,EAA6CJ,IAAI,CAACC,MAAL,KAAgB,GAA7D,CAAV;AACH,CAFD",
      "sourceRoot": "/home/rogerio/Repositories/node-metrics/src",
      "sourcesContent": [
        "import express from 'express'\nimport http from 'http'\nimport bodyParser from 'body-parser'\nimport NodeMetrics from './NodeMetrics'\n\nconst app = express()\n\nhttp.createServer(app).listen(3001, function () {\n    console.log('Listening on port 3001')\n  })\n\nNodeMetrics.connect('localhost').then(r=>console.log(r))\n\napp.use(bodyParser.json())\napp.use(NodeMetrics.expressMetricsMiddleware)\n  \napp.get('/', function (req, res) {\n    setTimeout(() => res.end('Hello world!'), Math.random() * 500)\n})\n\napp.post('/', function (req, res) {\n    setTimeout(() => res.end('Hello world!'), Math.random() * 500)\n})\n\napp.get('/e', function (req, res) {\n    setTimeout(() => res.status(500).send('Hello world!'), Math.random() * 500)\n})"
      ]
    },
    "sourceType": "script",
    "mtime": 1550262387249
  },
  "{\"sourceRoot\":\"/home/rogerio/Repositories/node-metrics/src\",\"caller\":{\"name\":\"@babel/node\"},\"cwd\":\"/home/rogerio/Repositories/node-metrics\",\"filename\":\"/home/rogerio/Repositories/node-metrics/src/test.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/home/rogerio/Repositories/node-metrics\",\"plugins\":[{\"key\":\"syntax-dynamic-import\",\"visitor\":{\"_exploded\":true,\"_verified\":true},\"options\":{}},{\"key\":\"syntax-import-meta\",\"visitor\":{\"_exploded\":true,\"_verified\":true},\"options\":{}},{\"key\":\"proposal-class-properties\",\"visitor\":{\"PrivateName\":{\"enter\":[null]},\"ExportDefaultDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"proposal-decorators\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]}},\"options\":{\"legacy\":true}},{\"key\":\"proposal-function-sent\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"MetaProperty\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"proposal-export-namespace-from\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"ExportNamedDeclaration\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"proposal-numeric-separator\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"NumericLiteral\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"proposal-throw-expressions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"UnaryExpression\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"loose\":false}},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"BlockStatement\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_verified\":true,\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"regenerator-transform\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ObjectMethod\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]},\"ClassMethod\":{\"exit\":[null]},\"ClassPrivateMethod\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-async-generator-functions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-catch-binding\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.2.2": {
    "metadata": {},
    "options": {
      "sourceRoot": "/home/rogerio/Repositories/node-metrics/src",
      "caller": {
        "name": "@babel/node"
      },
      "cwd": "/home/rogerio/Repositories/node-metrics",
      "filename": "/home/rogerio/Repositories/node-metrics/src/test.js",
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/home/rogerio/Repositories/node-metrics",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "syntax-dynamic-import",
          "visitor": {
            "_exploded": true,
            "_verified": true
          },
          "options": {}
        },
        {
          "key": "syntax-import-meta",
          "visitor": {
            "_exploded": true,
            "_verified": true
          },
          "options": {}
        },
        {
          "key": "proposal-class-properties",
          "visitor": {
            "PrivateName": {
              "enter": [
                null
              ]
            },
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "proposal-decorators",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "legacy": true
          }
        },
        {
          "key": "proposal-function-sent",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "MetaProperty": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "proposal-export-namespace-from",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "proposal-numeric-separator",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "NumericLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "proposal-throw-expressions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "UnaryExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "loose": false
          }
        },
        {
          "key": "transform-template-literals",
          "visitor": {
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "TemplateLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-literals",
          "visitor": {
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-function-name",
          "visitor": {
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-arrow-functions",
          "visitor": {
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoped-functions",
          "visitor": {
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchCase": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-classes",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-object-super",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-shorthand-properties",
          "visitor": {
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-duplicate-keys",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-computed-properties",
          "visitor": {
            "ObjectExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-for-of",
          "visitor": {
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-sticky-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-dotall-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-spread",
          "visitor": {
            "ArrayExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-parameters",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-destructuring",
          "visitor": {
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoping",
          "visitor": {
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_verified": true,
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-typeof-symbol",
          "visitor": {
            "UnaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-new-target",
          "visitor": {
            "MetaProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "regenerator-transform",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "exit": [
                null
              ]
            },
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectMethod": {
              "exit": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "exit": [
                null
              ]
            },
            "ClassMethod": {
              "exit": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "exit": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-exponentiation-operator",
          "visitor": {
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-async-to-generator",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-async-generator-functions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-unicode-property-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-catch-binding",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CatchClause": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-named-capturing-groups-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/home/rogerio/Repositories/node-metrics/src/test.js",
        "plugins": [
          "dynamicImport",
          "importMeta",
          "classProperties",
          "classPrivateProperties",
          "jsonStrings",
          "decorators-legacy",
          "functionSent",
          "exportNamespaceFrom",
          "numericSeparator",
          "throwExpressions",
          "asyncGenerators",
          "objectRestSpread",
          "jsonStrings",
          "optionalCatchBinding"
        ]
      },
      "generatorOpts": {
        "filename": "/home/rogerio/Repositories/node-metrics/src/test.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/home/rogerio/Repositories/node-metrics/src",
        "sourceFileName": "test.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _influx = require(\"influx\");\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar influx;\n\nvar NodeMetrics =\n/*#__PURE__*/\nfunction () {\n  function NodeMetrics() {\n    _classCallCheck(this, NodeMetrics);\n  }\n\n  _createClass(NodeMetrics, null, [{\n    key: \"connect\",\n    value: function connect() {\n      var host = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'localhost';\n      var database = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'node_metrics';\n      if (!host) throw new Error('Host must be supplied');\n      influx = new _influx.InfluxDB({\n        host: host,\n        database: database,\n        schema: [{\n          measurement: 'express_response_times',\n          fields: {\n            duration: _influx.FieldType.INTEGER\n          },\n          tags: ['path', 'method', 'statusCode', 'requestBody']\n        }]\n      });\n      return influx.getDatabaseNames().then(function (names) {\n        if (names.includes(database)) {\n          return;\n        }\n\n        return influx.createDatabase(database);\n      }).then(function () {\n        return true;\n      });\n    }\n  }, {\n    key: \"expressMetricsMiddleware\",\n    value: function expressMetricsMiddleware(exception, request, response, next) {\n      var start = Date.now();\n      var path = request.path,\n          method = request.method,\n          requestBody = request.body;\n      response.on('finish', function () {\n        var duration = Date.now() - start;\n        console.log(response);\n        influx.writePoints([{\n          measurement: 'express_response_times',\n          tags: {\n            path: path,\n            method: method,\n            requestBody: requestBody\n          },\n          fields: {\n            duration: duration\n          }\n        }]).catch(function (err) {\n          console.error(\"Error saving data to InfluxDB! \".concat(err.stack));\n        });\n      });\n      return next();\n    }\n  }]);\n\n  return NodeMetrics;\n}();\n\nexports.default = NodeMetrics;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QuanMiXSwibmFtZXMiOlsiaW5mbHV4IiwiTm9kZU1ldHJpY3MiLCJob3N0IiwiZGF0YWJhc2UiLCJFcnJvciIsIkluZmx1eERCIiwic2NoZW1hIiwibWVhc3VyZW1lbnQiLCJmaWVsZHMiLCJkdXJhdGlvbiIsIkZpZWxkVHlwZSIsIklOVEVHRVIiLCJ0YWdzIiwiZ2V0RGF0YWJhc2VOYW1lcyIsInRoZW4iLCJuYW1lcyIsImluY2x1ZGVzIiwiY3JlYXRlRGF0YWJhc2UiLCJleGNlcHRpb24iLCJyZXF1ZXN0IiwicmVzcG9uc2UiLCJuZXh0Iiwic3RhcnQiLCJEYXRlIiwibm93IiwicGF0aCIsIm1ldGhvZCIsInJlcXVlc3RCb2R5IiwiYm9keSIsIm9uIiwiY29uc29sZSIsImxvZyIsIndyaXRlUG9pbnRzIiwiY2F0Y2giLCJlcnIiLCJlcnJvciIsInN0YWNrIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBRUE7Ozs7Ozs7O0FBRUEsSUFBSUEsTUFBSjs7SUFFcUJDLFc7Ozs7Ozs7Ozs4QkFDNkM7QUFBQSxVQUEvQ0MsSUFBK0MsdUVBQXhDLFdBQXdDO0FBQUEsVUFBM0JDLFFBQTJCLHVFQUFoQixjQUFnQjtBQUMxRCxVQUFJLENBQUNELElBQUwsRUFBVyxNQUFNLElBQUlFLEtBQUosQ0FBVSx1QkFBVixDQUFOO0FBRVhKLE1BQUFBLE1BQU0sR0FBRyxJQUFJSyxnQkFBSixDQUFhO0FBQ2xCSCxRQUFBQSxJQUFJLEVBQUpBLElBRGtCO0FBRWxCQyxRQUFBQSxRQUFRLEVBQVJBLFFBRmtCO0FBR2xCRyxRQUFBQSxNQUFNLEVBQUUsQ0FDTjtBQUNFQyxVQUFBQSxXQUFXLEVBQUUsd0JBRGY7QUFFRUMsVUFBQUEsTUFBTSxFQUFFO0FBQ05DLFlBQUFBLFFBQVEsRUFBRUMsa0JBQVVDO0FBRGQsV0FGVjtBQUtFQyxVQUFBQSxJQUFJLEVBQUUsQ0FDSixNQURJLEVBRUosUUFGSSxFQUdKLFlBSEksRUFJSixhQUpJO0FBTFIsU0FETTtBQUhVLE9BQWIsQ0FBVDtBQW1CQSxhQUFPWixNQUFNLENBQUNhLGdCQUFQLEdBQ0ZDLElBREUsQ0FDRyxVQUFBQyxLQUFLLEVBQUk7QUFDWCxZQUFHQSxLQUFLLENBQUNDLFFBQU4sQ0FBZWIsUUFBZixDQUFILEVBQTZCO0FBQ3pCO0FBQ0g7O0FBQ0QsZUFBT0gsTUFBTSxDQUFDaUIsY0FBUCxDQUFzQmQsUUFBdEIsQ0FBUDtBQUNILE9BTkUsRUFPRlcsSUFQRSxDQU9HO0FBQUEsZUFBTSxJQUFOO0FBQUEsT0FQSCxDQUFQO0FBUUg7Ozs2Q0FFK0JJLFMsRUFBV0MsTyxFQUFTQyxRLEVBQVVDLEksRUFBTTtBQUNoRSxVQUFNQyxLQUFLLEdBQUdDLElBQUksQ0FBQ0MsR0FBTCxFQUFkO0FBRGdFLFVBRXpEQyxJQUZ5RCxHQUV0Qk4sT0FGc0IsQ0FFekRNLElBRnlEO0FBQUEsVUFFbkRDLE1BRm1ELEdBRXRCUCxPQUZzQixDQUVuRE8sTUFGbUQ7QUFBQSxVQUVyQ0MsV0FGcUMsR0FFdEJSLE9BRnNCLENBRTNDUyxJQUYyQztBQUloRVIsTUFBQUEsUUFBUSxDQUFDUyxFQUFULENBQVksUUFBWixFQUFzQixZQUFNO0FBQ3hCLFlBQU1wQixRQUFRLEdBQUdjLElBQUksQ0FBQ0MsR0FBTCxLQUFhRixLQUE5QjtBQUNBUSxRQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBWVgsUUFBWjtBQUNBcEIsUUFBQUEsTUFBTSxDQUFDZ0MsV0FBUCxDQUFtQixDQUNuQjtBQUNJekIsVUFBQUEsV0FBVyxFQUFFLHdCQURqQjtBQUVJSyxVQUFBQSxJQUFJLEVBQUU7QUFBRWEsWUFBQUEsSUFBSSxFQUFKQSxJQUFGO0FBQVFDLFlBQUFBLE1BQU0sRUFBTkEsTUFBUjtBQUFnQkMsWUFBQUEsV0FBVyxFQUFYQTtBQUFoQixXQUZWO0FBR0luQixVQUFBQSxNQUFNLEVBQUU7QUFBRUMsWUFBQUEsUUFBUSxFQUFSQTtBQUFGO0FBSFosU0FEbUIsQ0FBbkIsRUFNR3dCLEtBTkgsQ0FNUyxVQUFBQyxHQUFHLEVBQUk7QUFDWkosVUFBQUEsT0FBTyxDQUFDSyxLQUFSLDBDQUFnREQsR0FBRyxDQUFDRSxLQUFwRDtBQUNILFNBUkQ7QUFTSCxPQVpEO0FBYUEsYUFBT2YsSUFBSSxFQUFYO0FBQ0giLCJzb3VyY2VSb290IjoiL2hvbWUvcm9nZXJpby9SZXBvc2l0b3JpZXMvbm9kZS1tZXRyaWNzL3NyYyIsInNvdXJjZXNDb250ZW50IjpbIlxuXG5pbXBvcnQge0luZmx1eERCLCBGaWVsZFR5cGV9IGZyb20gJ2luZmx1eCdcblxubGV0IGluZmx1eFxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBOb2RlTWV0cmljcyB7XG4gICAgc3RhdGljIGNvbm5lY3QoaG9zdCA9ICdsb2NhbGhvc3QnLCBkYXRhYmFzZSA9ICdub2RlX21ldHJpY3MnKSB7XG4gICAgICAgIGlmICghaG9zdCkgdGhyb3cgbmV3IEVycm9yKCdIb3N0IG11c3QgYmUgc3VwcGxpZWQnKVxuICAgICAgICBcbiAgICAgICAgaW5mbHV4ID0gbmV3IEluZmx1eERCKHtcbiAgICAgICAgICAgIGhvc3QsXG4gICAgICAgICAgICBkYXRhYmFzZSxcbiAgICAgICAgICAgIHNjaGVtYTogW1xuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbWVhc3VyZW1lbnQ6ICdleHByZXNzX3Jlc3BvbnNlX3RpbWVzJyxcbiAgICAgICAgICAgICAgICBmaWVsZHM6IHtcbiAgICAgICAgICAgICAgICAgIGR1cmF0aW9uOiBGaWVsZFR5cGUuSU5URUdFUixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHRhZ3M6IFtcbiAgICAgICAgICAgICAgICAgICdwYXRoJyxcbiAgICAgICAgICAgICAgICAgICdtZXRob2QnLFxuICAgICAgICAgICAgICAgICAgJ3N0YXR1c0NvZGUnLFxuICAgICAgICAgICAgICAgICAgJ3JlcXVlc3RCb2R5J1xuICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgXVxuICAgICAgICB9KVxuXG4gICAgICAgIHJldHVybiBpbmZsdXguZ2V0RGF0YWJhc2VOYW1lcygpXG4gICAgICAgICAgICAudGhlbihuYW1lcyA9PiB7XG4gICAgICAgICAgICAgICAgaWYobmFtZXMuaW5jbHVkZXMoZGF0YWJhc2UpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVyblxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gaW5mbHV4LmNyZWF0ZURhdGFiYXNlKGRhdGFiYXNlKVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC50aGVuKCgpID0+IHRydWUpXG4gICAgfVxuXG4gICAgc3RhdGljIGV4cHJlc3NNZXRyaWNzTWlkZGxld2FyZShleGNlcHRpb24sIHJlcXVlc3QsIHJlc3BvbnNlLCBuZXh0KSB7XG4gICAgICAgIGNvbnN0IHN0YXJ0ID0gRGF0ZS5ub3coKVxuICAgICAgICBjb25zdCB7cGF0aCwgbWV0aG9kLCBib2R5OiByZXF1ZXN0Qm9keX0gPSByZXF1ZXN0XG5cbiAgICAgICAgcmVzcG9uc2Uub24oJ2ZpbmlzaCcsICgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGR1cmF0aW9uID0gRGF0ZS5ub3coKSAtIHN0YXJ0XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhyZXNwb25zZSlcbiAgICAgICAgICAgIGluZmx1eC53cml0ZVBvaW50cyhbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbWVhc3VyZW1lbnQ6ICdleHByZXNzX3Jlc3BvbnNlX3RpbWVzJyxcbiAgICAgICAgICAgICAgICB0YWdzOiB7IHBhdGgsIG1ldGhvZCwgcmVxdWVzdEJvZHkgfSxcbiAgICAgICAgICAgICAgICBmaWVsZHM6IHsgZHVyYXRpb24gfSxcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF0pLmNhdGNoKGVyciA9PiB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihgRXJyb3Igc2F2aW5nIGRhdGEgdG8gSW5mbHV4REIhICR7ZXJyLnN0YWNrfWApXG4gICAgICAgICAgICB9KVxuICAgICAgICB9KVxuICAgICAgICByZXR1cm4gbmV4dCgpXG4gICAgfSBcbn0iXX0=",
    "map": {
      "version": 3,
      "sources": [
        "test.js"
      ],
      "names": [
        "influx",
        "NodeMetrics",
        "host",
        "database",
        "Error",
        "InfluxDB",
        "schema",
        "measurement",
        "fields",
        "duration",
        "FieldType",
        "INTEGER",
        "tags",
        "getDatabaseNames",
        "then",
        "names",
        "includes",
        "createDatabase",
        "exception",
        "request",
        "response",
        "next",
        "start",
        "Date",
        "now",
        "path",
        "method",
        "requestBody",
        "body",
        "on",
        "console",
        "log",
        "writePoints",
        "catch",
        "err",
        "error",
        "stack"
      ],
      "mappings": ";;;;;;;AAEA;;;;;;;;AAEA,IAAIA,MAAJ;;IAEqBC,W;;;;;;;;;8BAC6C;AAAA,UAA/CC,IAA+C,uEAAxC,WAAwC;AAAA,UAA3BC,QAA2B,uEAAhB,cAAgB;AAC1D,UAAI,CAACD,IAAL,EAAW,MAAM,IAAIE,KAAJ,CAAU,uBAAV,CAAN;AAEXJ,MAAAA,MAAM,GAAG,IAAIK,gBAAJ,CAAa;AAClBH,QAAAA,IAAI,EAAJA,IADkB;AAElBC,QAAAA,QAAQ,EAARA,QAFkB;AAGlBG,QAAAA,MAAM,EAAE,CACN;AACEC,UAAAA,WAAW,EAAE,wBADf;AAEEC,UAAAA,MAAM,EAAE;AACNC,YAAAA,QAAQ,EAAEC,kBAAUC;AADd,WAFV;AAKEC,UAAAA,IAAI,EAAE,CACJ,MADI,EAEJ,QAFI,EAGJ,YAHI,EAIJ,aAJI;AALR,SADM;AAHU,OAAb,CAAT;AAmBA,aAAOZ,MAAM,CAACa,gBAAP,GACFC,IADE,CACG,UAAAC,KAAK,EAAI;AACX,YAAGA,KAAK,CAACC,QAAN,CAAeb,QAAf,CAAH,EAA6B;AACzB;AACH;;AACD,eAAOH,MAAM,CAACiB,cAAP,CAAsBd,QAAtB,CAAP;AACH,OANE,EAOFW,IAPE,CAOG;AAAA,eAAM,IAAN;AAAA,OAPH,CAAP;AAQH;;;6CAE+BI,S,EAAWC,O,EAASC,Q,EAAUC,I,EAAM;AAChE,UAAMC,KAAK,GAAGC,IAAI,CAACC,GAAL,EAAd;AADgE,UAEzDC,IAFyD,GAEtBN,OAFsB,CAEzDM,IAFyD;AAAA,UAEnDC,MAFmD,GAEtBP,OAFsB,CAEnDO,MAFmD;AAAA,UAErCC,WAFqC,GAEtBR,OAFsB,CAE3CS,IAF2C;AAIhER,MAAAA,QAAQ,CAACS,EAAT,CAAY,QAAZ,EAAsB,YAAM;AACxB,YAAMpB,QAAQ,GAAGc,IAAI,CAACC,GAAL,KAAaF,KAA9B;AACAQ,QAAAA,OAAO,CAACC,GAAR,CAAYX,QAAZ;AACApB,QAAAA,MAAM,CAACgC,WAAP,CAAmB,CACnB;AACIzB,UAAAA,WAAW,EAAE,wBADjB;AAEIK,UAAAA,IAAI,EAAE;AAAEa,YAAAA,IAAI,EAAJA,IAAF;AAAQC,YAAAA,MAAM,EAANA,MAAR;AAAgBC,YAAAA,WAAW,EAAXA;AAAhB,WAFV;AAGInB,UAAAA,MAAM,EAAE;AAAEC,YAAAA,QAAQ,EAARA;AAAF;AAHZ,SADmB,CAAnB,EAMGwB,KANH,CAMS,UAAAC,GAAG,EAAI;AACZJ,UAAAA,OAAO,CAACK,KAAR,0CAAgDD,GAAG,CAACE,KAApD;AACH,SARD;AASH,OAZD;AAaA,aAAOf,IAAI,EAAX;AACH",
      "sourceRoot": "/home/rogerio/Repositories/node-metrics/src",
      "sourcesContent": [
        "\n\nimport {InfluxDB, FieldType} from 'influx'\n\nlet influx\n\nexport default class NodeMetrics {\n    static connect(host = 'localhost', database = 'node_metrics') {\n        if (!host) throw new Error('Host must be supplied')\n        \n        influx = new InfluxDB({\n            host,\n            database,\n            schema: [\n              {\n                measurement: 'express_response_times',\n                fields: {\n                  duration: FieldType.INTEGER,\n                },\n                tags: [\n                  'path',\n                  'method',\n                  'statusCode',\n                  'requestBody'\n                ]\n              }\n            ]\n        })\n\n        return influx.getDatabaseNames()\n            .then(names => {\n                if(names.includes(database)) {\n                    return\n                }\n                return influx.createDatabase(database)\n            })\n            .then(() => true)\n    }\n\n    static expressMetricsMiddleware(exception, request, response, next) {\n        const start = Date.now()\n        const {path, method, body: requestBody} = request\n\n        response.on('finish', () => {\n            const duration = Date.now() - start\n            console.log(response)\n            influx.writePoints([\n            {\n                measurement: 'express_response_times',\n                tags: { path, method, requestBody },\n                fields: { duration },\n            }\n            ]).catch(err => {\n                console.error(`Error saving data to InfluxDB! ${err.stack}`)\n            })\n        })\n        return next()\n    } \n}"
      ]
    },
    "sourceType": "script",
    "mtime": 1550081505880
  },
  "{\"sourceRoot\":\"/home/rogerio/Repositories/node-metrics/src\",\"caller\":{\"name\":\"@babel/node\"},\"cwd\":\"/home/rogerio/Repositories/node-metrics\",\"filename\":\"/home/rogerio/Repositories/node-metrics/src/test.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/home/rogerio/Repositories/node-metrics\",\"plugins\":[{\"key\":\"syntax-dynamic-import\",\"visitor\":{},\"options\":{}},{\"key\":\"syntax-import-meta\",\"visitor\":{},\"options\":{}},{\"key\":\"proposal-class-properties\",\"visitor\":{\"PrivateName\":{\"enter\":[null]},\"ExportDefaultDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"proposal-decorators\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]}},\"options\":{\"legacy\":true}},{\"key\":\"proposal-function-sent\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"MetaProperty\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"proposal-export-namespace-from\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"ExportNamedDeclaration\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"proposal-numeric-separator\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"NumericLiteral\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"proposal-throw-expressions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"UnaryExpression\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"loose\":false}},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"BlockStatement\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_verified\":true,\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"regenerator-transform\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ObjectMethod\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]},\"ClassMethod\":{\"exit\":[null]},\"ClassPrivateMethod\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-async-generator-functions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-catch-binding\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.2.2": {
    "metadata": {},
    "options": {
      "sourceRoot": "/home/rogerio/Repositories/node-metrics/src",
      "caller": {
        "name": "@babel/node"
      },
      "cwd": "/home/rogerio/Repositories/node-metrics",
      "filename": "/home/rogerio/Repositories/node-metrics/src/test.js",
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/home/rogerio/Repositories/node-metrics",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "syntax-dynamic-import",
          "visitor": {
            "_exploded": true,
            "_verified": true
          },
          "options": {}
        },
        {
          "key": "syntax-import-meta",
          "visitor": {
            "_exploded": true,
            "_verified": true
          },
          "options": {}
        },
        {
          "key": "proposal-class-properties",
          "visitor": {
            "PrivateName": {
              "enter": [
                null
              ]
            },
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "proposal-decorators",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "legacy": true
          }
        },
        {
          "key": "proposal-function-sent",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "MetaProperty": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "proposal-export-namespace-from",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "proposal-numeric-separator",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "NumericLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "proposal-throw-expressions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "UnaryExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "loose": false
          }
        },
        {
          "key": "transform-template-literals",
          "visitor": {
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "TemplateLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-literals",
          "visitor": {
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-function-name",
          "visitor": {
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-arrow-functions",
          "visitor": {
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoped-functions",
          "visitor": {
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchCase": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-classes",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-object-super",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-shorthand-properties",
          "visitor": {
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-duplicate-keys",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-computed-properties",
          "visitor": {
            "ObjectExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-for-of",
          "visitor": {
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-sticky-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-dotall-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-spread",
          "visitor": {
            "ArrayExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-parameters",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-destructuring",
          "visitor": {
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoping",
          "visitor": {
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_verified": true,
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-typeof-symbol",
          "visitor": {
            "UnaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-new-target",
          "visitor": {
            "MetaProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "regenerator-transform",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "exit": [
                null
              ]
            },
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectMethod": {
              "exit": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "exit": [
                null
              ]
            },
            "ClassMethod": {
              "exit": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "exit": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-exponentiation-operator",
          "visitor": {
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-async-to-generator",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-async-generator-functions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-unicode-property-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-catch-binding",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CatchClause": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-named-capturing-groups-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/home/rogerio/Repositories/node-metrics/src/test.js",
        "plugins": [
          "dynamicImport",
          "importMeta",
          "classProperties",
          "classPrivateProperties",
          "jsonStrings",
          "decorators-legacy",
          "functionSent",
          "exportNamespaceFrom",
          "numericSeparator",
          "throwExpressions",
          "asyncGenerators",
          "objectRestSpread",
          "jsonStrings",
          "optionalCatchBinding"
        ]
      },
      "generatorOpts": {
        "filename": "/home/rogerio/Repositories/node-metrics/src/test.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/home/rogerio/Repositories/node-metrics/src",
        "sourceFileName": "test.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nvar _express = _interopRequireDefault(require(\"express\"));\n\nvar _index = _interopRequireDefault(require(\"./index.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconsole.log(_index.default);\nvar app = (0, _express.default)(); //NodeMetrics.connect('localhost').then(r=>console.log(r))\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QuanMiXSwibmFtZXMiOlsiY29uc29sZSIsImxvZyIsImEiLCJhcHAiXSwibWFwcGluZ3MiOiI7O0FBQUE7O0FBQ0E7Ozs7QUFFQUEsT0FBTyxDQUFDQyxHQUFSLENBQVlDLGNBQVo7QUFFQSxJQUFNQyxHQUFHLEdBQUcsdUJBQVosQyxDQUVBIiwic291cmNlUm9vdCI6Ii9ob21lL3JvZ2VyaW8vUmVwb3NpdG9yaWVzL25vZGUtbWV0cmljcy9zcmMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgZXhwcmVzcyBmcm9tICdleHByZXNzJ1xuaW1wb3J0IGEgZnJvbSAnLi9pbmRleC5qcydcblxuY29uc29sZS5sb2coYSlcblxuY29uc3QgYXBwID0gZXhwcmVzcygpXG5cbi8vTm9kZU1ldHJpY3MuY29ubmVjdCgnbG9jYWxob3N0JykudGhlbihyPT5jb25zb2xlLmxvZyhyKSlcblxuIl19",
    "map": {
      "version": 3,
      "sources": [
        "test.js"
      ],
      "names": [
        "console",
        "log",
        "a",
        "app"
      ],
      "mappings": ";;AAAA;;AACA;;;;AAEAA,OAAO,CAACC,GAAR,CAAYC,cAAZ;AAEA,IAAMC,GAAG,GAAG,uBAAZ,C,CAEA",
      "sourceRoot": "/home/rogerio/Repositories/node-metrics/src",
      "sourcesContent": [
        "import express from 'express'\nimport a from './index.js'\n\nconsole.log(a)\n\nconst app = express()\n\n//NodeMetrics.connect('localhost').then(r=>console.log(r))\n\n"
      ]
    },
    "sourceType": "script",
    "mtime": 1550081400499
  },
  "{\"sourceRoot\":\"/home/rogerio/Repositories/node-metrics/src\",\"caller\":{\"name\":\"@babel/node\"},\"cwd\":\"/home/rogerio/Repositories/node-metrics\",\"filename\":\"/home/rogerio/Repositories/node-metrics/src/NodeMetrics.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/home/rogerio/Repositories/node-metrics\",\"plugins\":[{\"key\":\"syntax-dynamic-import\",\"visitor\":{\"_exploded\":true,\"_verified\":true},\"options\":{}},{\"key\":\"syntax-import-meta\",\"visitor\":{\"_exploded\":true,\"_verified\":true},\"options\":{}},{\"key\":\"proposal-class-properties\",\"visitor\":{\"PrivateName\":{\"enter\":[null]},\"ExportDefaultDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"proposal-decorators\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]}},\"options\":{\"legacy\":true}},{\"key\":\"proposal-function-sent\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"MetaProperty\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"proposal-export-namespace-from\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"ExportNamedDeclaration\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"proposal-numeric-separator\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"NumericLiteral\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"proposal-throw-expressions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"UnaryExpression\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"loose\":false}},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"BlockStatement\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_verified\":true,\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"regenerator-transform\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ObjectMethod\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]},\"ClassMethod\":{\"exit\":[null]},\"ClassPrivateMethod\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-async-generator-functions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-catch-binding\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.2.2": {
    "metadata": {},
    "options": {
      "sourceRoot": "/home/rogerio/Repositories/node-metrics/src",
      "caller": {
        "name": "@babel/node"
      },
      "cwd": "/home/rogerio/Repositories/node-metrics",
      "filename": "/home/rogerio/Repositories/node-metrics/src/NodeMetrics.js",
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/home/rogerio/Repositories/node-metrics",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "syntax-dynamic-import",
          "visitor": {
            "_exploded": true,
            "_verified": true
          },
          "options": {}
        },
        {
          "key": "syntax-import-meta",
          "visitor": {
            "_exploded": true,
            "_verified": true
          },
          "options": {}
        },
        {
          "key": "proposal-class-properties",
          "visitor": {
            "PrivateName": {
              "enter": [
                null
              ]
            },
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "proposal-decorators",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "legacy": true
          }
        },
        {
          "key": "proposal-function-sent",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "MetaProperty": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "proposal-export-namespace-from",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "proposal-numeric-separator",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "NumericLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "proposal-throw-expressions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "UnaryExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "loose": false
          }
        },
        {
          "key": "transform-template-literals",
          "visitor": {
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "TemplateLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-literals",
          "visitor": {
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-function-name",
          "visitor": {
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-arrow-functions",
          "visitor": {
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoped-functions",
          "visitor": {
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchCase": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-classes",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-object-super",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-shorthand-properties",
          "visitor": {
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-duplicate-keys",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-computed-properties",
          "visitor": {
            "ObjectExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-for-of",
          "visitor": {
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-sticky-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-dotall-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-spread",
          "visitor": {
            "ArrayExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-parameters",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-destructuring",
          "visitor": {
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoping",
          "visitor": {
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_verified": true,
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-typeof-symbol",
          "visitor": {
            "UnaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-new-target",
          "visitor": {
            "MetaProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "regenerator-transform",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "exit": [
                null
              ]
            },
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectMethod": {
              "exit": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "exit": [
                null
              ]
            },
            "ClassMethod": {
              "exit": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "exit": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-exponentiation-operator",
          "visitor": {
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-async-to-generator",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-async-generator-functions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-unicode-property-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-catch-binding",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CatchClause": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-named-capturing-groups-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/home/rogerio/Repositories/node-metrics/src/NodeMetrics.js",
        "plugins": [
          "dynamicImport",
          "importMeta",
          "classProperties",
          "classPrivateProperties",
          "jsonStrings",
          "decorators-legacy",
          "functionSent",
          "exportNamespaceFrom",
          "numericSeparator",
          "throwExpressions",
          "asyncGenerators",
          "objectRestSpread",
          "jsonStrings",
          "optionalCatchBinding"
        ]
      },
      "generatorOpts": {
        "filename": "/home/rogerio/Repositories/node-metrics/src/NodeMetrics.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/home/rogerio/Repositories/node-metrics/src",
        "sourceFileName": "NodeMetrics.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _influx = require(\"influx\");\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar influx;\n\nvar NodeMetrics =\n/*#__PURE__*/\nfunction () {\n  function NodeMetrics() {\n    _classCallCheck(this, NodeMetrics);\n  }\n\n  _createClass(NodeMetrics, null, [{\n    key: \"connect\",\n    value: function connect() {\n      var host = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'localhost';\n      var database = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'node_metrics';\n      if (!host) throw new Error('Host must be supplied');\n      influx = new _influx.InfluxDB({\n        host: host,\n        database: database,\n        schema: [{\n          measurement: 'express_response_times',\n          fields: {\n            duration: _influx.FieldType.INTEGER\n          },\n          tags: ['path', 'method', 'body', 'statusCode']\n        }]\n      });\n      return influx.getDatabaseNames().then(function (names) {\n        if (names.includes(database)) {\n          return;\n        }\n\n        return influx.createDatabase(database);\n      }).then(function () {\n        return true;\n      });\n    }\n  }, {\n    key: \"expressMetricsMiddleware\",\n    value: function expressMetricsMiddleware(request, response, next) {\n      var start = Date.now();\n      response.on('finish', function () {\n        var duration = Date.now() - start;\n        var path = request.path,\n            method = request.method,\n            body = request.body;\n        var statusCode = response.statusCode;\n        var tags = {\n          path: path,\n          method: method,\n          body: JSON.stringify(body),\n          statusCode: statusCode\n        };\n        var fields = {\n          duration: duration\n        };\n        influx.writePoints([{\n          measurement: 'express_response_times',\n          tags: tags,\n          fields: fields\n        }]).catch(function (err) {\n          console.error(\"Error saving data to InfluxDB! \".concat(err.stack));\n        });\n      });\n      return next();\n    }\n  }]);\n\n  return NodeMetrics;\n}();\n\nexports.default = NodeMetrics;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIk5vZGVNZXRyaWNzLmpzIl0sIm5hbWVzIjpbImluZmx1eCIsIk5vZGVNZXRyaWNzIiwiaG9zdCIsImRhdGFiYXNlIiwiRXJyb3IiLCJJbmZsdXhEQiIsInNjaGVtYSIsIm1lYXN1cmVtZW50IiwiZmllbGRzIiwiZHVyYXRpb24iLCJGaWVsZFR5cGUiLCJJTlRFR0VSIiwidGFncyIsImdldERhdGFiYXNlTmFtZXMiLCJ0aGVuIiwibmFtZXMiLCJpbmNsdWRlcyIsImNyZWF0ZURhdGFiYXNlIiwicmVxdWVzdCIsInJlc3BvbnNlIiwibmV4dCIsInN0YXJ0IiwiRGF0ZSIsIm5vdyIsIm9uIiwicGF0aCIsIm1ldGhvZCIsImJvZHkiLCJzdGF0dXNDb2RlIiwiSlNPTiIsInN0cmluZ2lmeSIsIndyaXRlUG9pbnRzIiwiY2F0Y2giLCJlcnIiLCJjb25zb2xlIiwiZXJyb3IiLCJzdGFjayJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUVBOzs7Ozs7OztBQUVBLElBQUlBLE1BQUo7O0lBRXFCQyxXOzs7Ozs7Ozs7OEJBQzZDO0FBQUEsVUFBL0NDLElBQStDLHVFQUF4QyxXQUF3QztBQUFBLFVBQTNCQyxRQUEyQix1RUFBaEIsY0FBZ0I7QUFDMUQsVUFBSSxDQUFDRCxJQUFMLEVBQVcsTUFBTSxJQUFJRSxLQUFKLENBQVUsdUJBQVYsQ0FBTjtBQUVYSixNQUFBQSxNQUFNLEdBQUcsSUFBSUssZ0JBQUosQ0FBYTtBQUNsQkgsUUFBQUEsSUFBSSxFQUFKQSxJQURrQjtBQUVsQkMsUUFBQUEsUUFBUSxFQUFSQSxRQUZrQjtBQUdsQkcsUUFBQUEsTUFBTSxFQUFFLENBQ047QUFDRUMsVUFBQUEsV0FBVyxFQUFFLHdCQURmO0FBRUVDLFVBQUFBLE1BQU0sRUFBRTtBQUNOQyxZQUFBQSxRQUFRLEVBQUVDLGtCQUFVQztBQURkLFdBRlY7QUFLRUMsVUFBQUEsSUFBSSxFQUFFLENBQ0osTUFESSxFQUVKLFFBRkksRUFHSixNQUhJLEVBSUosWUFKSTtBQUxSLFNBRE07QUFIVSxPQUFiLENBQVQ7QUFtQkEsYUFBT1osTUFBTSxDQUFDYSxnQkFBUCxHQUNGQyxJQURFLENBQ0csVUFBQUMsS0FBSyxFQUFJO0FBQ1gsWUFBR0EsS0FBSyxDQUFDQyxRQUFOLENBQWViLFFBQWYsQ0FBSCxFQUE2QjtBQUN6QjtBQUNIOztBQUNELGVBQU9ILE1BQU0sQ0FBQ2lCLGNBQVAsQ0FBc0JkLFFBQXRCLENBQVA7QUFDSCxPQU5FLEVBT0ZXLElBUEUsQ0FPRztBQUFBLGVBQU0sSUFBTjtBQUFBLE9BUEgsQ0FBUDtBQVFIOzs7NkNBRStCSSxPLEVBQVNDLFEsRUFBVUMsSSxFQUFNO0FBQ3JELFVBQU1DLEtBQUssR0FBR0MsSUFBSSxDQUFDQyxHQUFMLEVBQWQ7QUFFQUosTUFBQUEsUUFBUSxDQUFDSyxFQUFULENBQVksUUFBWixFQUFzQixZQUFNO0FBQ3hCLFlBQU1mLFFBQVEsR0FBR2EsSUFBSSxDQUFDQyxHQUFMLEtBQWFGLEtBQTlCO0FBRHdCLFlBRWhCSSxJQUZnQixHQUVPUCxPQUZQLENBRWhCTyxJQUZnQjtBQUFBLFlBRVZDLE1BRlUsR0FFT1IsT0FGUCxDQUVWUSxNQUZVO0FBQUEsWUFFRkMsSUFGRSxHQUVPVCxPQUZQLENBRUZTLElBRkU7QUFBQSxZQUdoQkMsVUFIZ0IsR0FHRFQsUUFIQyxDQUdoQlMsVUFIZ0I7QUFJeEIsWUFBTWhCLElBQUksR0FBRztBQUNUYSxVQUFBQSxJQUFJLEVBQUpBLElBRFM7QUFFVEMsVUFBQUEsTUFBTSxFQUFOQSxNQUZTO0FBR1RDLFVBQUFBLElBQUksRUFBRUUsSUFBSSxDQUFDQyxTQUFMLENBQWVILElBQWYsQ0FIRztBQUlUQyxVQUFBQSxVQUFVLEVBQUVBO0FBSkgsU0FBYjtBQU1BLFlBQU1wQixNQUFNLEdBQUc7QUFDWEMsVUFBQUEsUUFBUSxFQUFSQTtBQURXLFNBQWY7QUFJQVQsUUFBQUEsTUFBTSxDQUFDK0IsV0FBUCxDQUFtQixDQUNuQjtBQUNJeEIsVUFBQUEsV0FBVyxFQUFFLHdCQURqQjtBQUVJSyxVQUFBQSxJQUFJLEVBQUpBLElBRko7QUFHSUosVUFBQUEsTUFBTSxFQUFOQTtBQUhKLFNBRG1CLENBQW5CLEVBTUd3QixLQU5ILENBTVMsVUFBQUMsR0FBRyxFQUFJO0FBQ1pDLFVBQUFBLE9BQU8sQ0FBQ0MsS0FBUiwwQ0FBZ0RGLEdBQUcsQ0FBQ0csS0FBcEQ7QUFDSCxTQVJEO0FBU0gsT0F2QkQ7QUF3QkEsYUFBT2hCLElBQUksRUFBWDtBQUNIIiwic291cmNlUm9vdCI6Ii9ob21lL3JvZ2VyaW8vUmVwb3NpdG9yaWVzL25vZGUtbWV0cmljcy9zcmMiLCJzb3VyY2VzQ29udGVudCI6WyIvL1JFUVVJUkVTIGJvZHktcGFyc2VyXG5cbmltcG9ydCB7SW5mbHV4REIsIEZpZWxkVHlwZX0gZnJvbSAnaW5mbHV4J1xuXG5sZXQgaW5mbHV4XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE5vZGVNZXRyaWNzIHtcbiAgICBzdGF0aWMgY29ubmVjdChob3N0ID0gJ2xvY2FsaG9zdCcsIGRhdGFiYXNlID0gJ25vZGVfbWV0cmljcycpIHtcbiAgICAgICAgaWYgKCFob3N0KSB0aHJvdyBuZXcgRXJyb3IoJ0hvc3QgbXVzdCBiZSBzdXBwbGllZCcpXG4gICAgICAgIFxuICAgICAgICBpbmZsdXggPSBuZXcgSW5mbHV4REIoe1xuICAgICAgICAgICAgaG9zdCxcbiAgICAgICAgICAgIGRhdGFiYXNlLFxuICAgICAgICAgICAgc2NoZW1hOiBbXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBtZWFzdXJlbWVudDogJ2V4cHJlc3NfcmVzcG9uc2VfdGltZXMnLFxuICAgICAgICAgICAgICAgIGZpZWxkczoge1xuICAgICAgICAgICAgICAgICAgZHVyYXRpb246IEZpZWxkVHlwZS5JTlRFR0VSLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgdGFnczogW1xuICAgICAgICAgICAgICAgICAgJ3BhdGgnLFxuICAgICAgICAgICAgICAgICAgJ21ldGhvZCcsXG4gICAgICAgICAgICAgICAgICAnYm9keScsXG4gICAgICAgICAgICAgICAgICAnc3RhdHVzQ29kZScsXG4gICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBdXG4gICAgICAgIH0pXG5cbiAgICAgICAgcmV0dXJuIGluZmx1eC5nZXREYXRhYmFzZU5hbWVzKClcbiAgICAgICAgICAgIC50aGVuKG5hbWVzID0+IHtcbiAgICAgICAgICAgICAgICBpZihuYW1lcy5pbmNsdWRlcyhkYXRhYmFzZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBpbmZsdXguY3JlYXRlRGF0YWJhc2UoZGF0YWJhc2UpXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLnRoZW4oKCkgPT4gdHJ1ZSlcbiAgICB9XG5cbiAgICBzdGF0aWMgZXhwcmVzc01ldHJpY3NNaWRkbGV3YXJlKHJlcXVlc3QsIHJlc3BvbnNlLCBuZXh0KSB7XG4gICAgICAgIGNvbnN0IHN0YXJ0ID0gRGF0ZS5ub3coKVxuXG4gICAgICAgIHJlc3BvbnNlLm9uKCdmaW5pc2gnLCAoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBkdXJhdGlvbiA9IERhdGUubm93KCkgLSBzdGFydFxuICAgICAgICAgICAgY29uc3QgeyBwYXRoLCBtZXRob2QsIGJvZHkgfSA9IHJlcXVlc3RcbiAgICAgICAgICAgIGNvbnN0IHsgc3RhdHVzQ29kZSB9ID0gcmVzcG9uc2VcbiAgICAgICAgICAgIGNvbnN0IHRhZ3MgPSB7XG4gICAgICAgICAgICAgICAgcGF0aCwgXG4gICAgICAgICAgICAgICAgbWV0aG9kLCBcbiAgICAgICAgICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeShib2R5KSwgXG4gICAgICAgICAgICAgICAgc3RhdHVzQ29kZTogc3RhdHVzQ29kZSBcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGZpZWxkcyA9IHtcbiAgICAgICAgICAgICAgICBkdXJhdGlvblxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpbmZsdXgud3JpdGVQb2ludHMoW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG1lYXN1cmVtZW50OiAnZXhwcmVzc19yZXNwb25zZV90aW1lcycsXG4gICAgICAgICAgICAgICAgdGFncyxcbiAgICAgICAgICAgICAgICBmaWVsZHNcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF0pLmNhdGNoKGVyciA9PiB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihgRXJyb3Igc2F2aW5nIGRhdGEgdG8gSW5mbHV4REIhICR7ZXJyLnN0YWNrfWApXG4gICAgICAgICAgICB9KVxuICAgICAgICB9KVxuICAgICAgICByZXR1cm4gbmV4dCgpXG4gICAgfSBcbn0iXX0=",
    "map": {
      "version": 3,
      "sources": [
        "NodeMetrics.js"
      ],
      "names": [
        "influx",
        "NodeMetrics",
        "host",
        "database",
        "Error",
        "InfluxDB",
        "schema",
        "measurement",
        "fields",
        "duration",
        "FieldType",
        "INTEGER",
        "tags",
        "getDatabaseNames",
        "then",
        "names",
        "includes",
        "createDatabase",
        "request",
        "response",
        "next",
        "start",
        "Date",
        "now",
        "on",
        "path",
        "method",
        "body",
        "statusCode",
        "JSON",
        "stringify",
        "writePoints",
        "catch",
        "err",
        "console",
        "error",
        "stack"
      ],
      "mappings": ";;;;;;;AAEA;;;;;;;;AAEA,IAAIA,MAAJ;;IAEqBC,W;;;;;;;;;8BAC6C;AAAA,UAA/CC,IAA+C,uEAAxC,WAAwC;AAAA,UAA3BC,QAA2B,uEAAhB,cAAgB;AAC1D,UAAI,CAACD,IAAL,EAAW,MAAM,IAAIE,KAAJ,CAAU,uBAAV,CAAN;AAEXJ,MAAAA,MAAM,GAAG,IAAIK,gBAAJ,CAAa;AAClBH,QAAAA,IAAI,EAAJA,IADkB;AAElBC,QAAAA,QAAQ,EAARA,QAFkB;AAGlBG,QAAAA,MAAM,EAAE,CACN;AACEC,UAAAA,WAAW,EAAE,wBADf;AAEEC,UAAAA,MAAM,EAAE;AACNC,YAAAA,QAAQ,EAAEC,kBAAUC;AADd,WAFV;AAKEC,UAAAA,IAAI,EAAE,CACJ,MADI,EAEJ,QAFI,EAGJ,MAHI,EAIJ,YAJI;AALR,SADM;AAHU,OAAb,CAAT;AAmBA,aAAOZ,MAAM,CAACa,gBAAP,GACFC,IADE,CACG,UAAAC,KAAK,EAAI;AACX,YAAGA,KAAK,CAACC,QAAN,CAAeb,QAAf,CAAH,EAA6B;AACzB;AACH;;AACD,eAAOH,MAAM,CAACiB,cAAP,CAAsBd,QAAtB,CAAP;AACH,OANE,EAOFW,IAPE,CAOG;AAAA,eAAM,IAAN;AAAA,OAPH,CAAP;AAQH;;;6CAE+BI,O,EAASC,Q,EAAUC,I,EAAM;AACrD,UAAMC,KAAK,GAAGC,IAAI,CAACC,GAAL,EAAd;AAEAJ,MAAAA,QAAQ,CAACK,EAAT,CAAY,QAAZ,EAAsB,YAAM;AACxB,YAAMf,QAAQ,GAAGa,IAAI,CAACC,GAAL,KAAaF,KAA9B;AADwB,YAEhBI,IAFgB,GAEOP,OAFP,CAEhBO,IAFgB;AAAA,YAEVC,MAFU,GAEOR,OAFP,CAEVQ,MAFU;AAAA,YAEFC,IAFE,GAEOT,OAFP,CAEFS,IAFE;AAAA,YAGhBC,UAHgB,GAGDT,QAHC,CAGhBS,UAHgB;AAIxB,YAAMhB,IAAI,GAAG;AACTa,UAAAA,IAAI,EAAJA,IADS;AAETC,UAAAA,MAAM,EAANA,MAFS;AAGTC,UAAAA,IAAI,EAAEE,IAAI,CAACC,SAAL,CAAeH,IAAf,CAHG;AAITC,UAAAA,UAAU,EAAEA;AAJH,SAAb;AAMA,YAAMpB,MAAM,GAAG;AACXC,UAAAA,QAAQ,EAARA;AADW,SAAf;AAIAT,QAAAA,MAAM,CAAC+B,WAAP,CAAmB,CACnB;AACIxB,UAAAA,WAAW,EAAE,wBADjB;AAEIK,UAAAA,IAAI,EAAJA,IAFJ;AAGIJ,UAAAA,MAAM,EAANA;AAHJ,SADmB,CAAnB,EAMGwB,KANH,CAMS,UAAAC,GAAG,EAAI;AACZC,UAAAA,OAAO,CAACC,KAAR,0CAAgDF,GAAG,CAACG,KAApD;AACH,SARD;AASH,OAvBD;AAwBA,aAAOhB,IAAI,EAAX;AACH",
      "sourceRoot": "/home/rogerio/Repositories/node-metrics/src",
      "sourcesContent": [
        "//REQUIRES body-parser\n\nimport {InfluxDB, FieldType} from 'influx'\n\nlet influx\n\nexport default class NodeMetrics {\n    static connect(host = 'localhost', database = 'node_metrics') {\n        if (!host) throw new Error('Host must be supplied')\n        \n        influx = new InfluxDB({\n            host,\n            database,\n            schema: [\n              {\n                measurement: 'express_response_times',\n                fields: {\n                  duration: FieldType.INTEGER,\n                },\n                tags: [\n                  'path',\n                  'method',\n                  'body',\n                  'statusCode',\n                ]\n              }\n            ]\n        })\n\n        return influx.getDatabaseNames()\n            .then(names => {\n                if(names.includes(database)) {\n                    return\n                }\n                return influx.createDatabase(database)\n            })\n            .then(() => true)\n    }\n\n    static expressMetricsMiddleware(request, response, next) {\n        const start = Date.now()\n\n        response.on('finish', () => {\n            const duration = Date.now() - start\n            const { path, method, body } = request\n            const { statusCode } = response\n            const tags = {\n                path, \n                method, \n                body: JSON.stringify(body), \n                statusCode: statusCode \n            }\n            const fields = {\n                duration\n            }\n\n            influx.writePoints([\n            {\n                measurement: 'express_response_times',\n                tags,\n                fields\n            }\n            ]).catch(err => {\n                console.error(`Error saving data to InfluxDB! ${err.stack}`)\n            })\n        })\n        return next()\n    } \n}"
      ]
    },
    "sourceType": "script",
    "mtime": 1550262350473
  },
  "{\"sourceRoot\":\"/home/rogerio/Repositories/node-metrics/src\",\"caller\":{\"name\":\"@babel/node\"},\"cwd\":\"/home/rogerio/Repositories/node-metrics\",\"filename\":\"/home/rogerio/Repositories/node-metrics/src/NodeMetrics.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/home/rogerio/Repositories/node-metrics\",\"plugins\":[{\"key\":\"syntax-dynamic-import\",\"visitor\":{},\"options\":{}},{\"key\":\"syntax-import-meta\",\"visitor\":{},\"options\":{}},{\"key\":\"proposal-class-properties\",\"visitor\":{\"PrivateName\":{\"enter\":[null]},\"ExportDefaultDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"proposal-decorators\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]}},\"options\":{\"legacy\":true}},{\"key\":\"proposal-function-sent\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"MetaProperty\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"proposal-export-namespace-from\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"ExportNamedDeclaration\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"proposal-numeric-separator\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"NumericLiteral\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"proposal-throw-expressions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"UnaryExpression\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"loose\":false}},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"BlockStatement\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_verified\":true,\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"regenerator-transform\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ObjectMethod\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]},\"ClassMethod\":{\"exit\":[null]},\"ClassPrivateMethod\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-async-generator-functions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-catch-binding\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.2.2": {
    "metadata": {},
    "options": {
      "sourceRoot": "/home/rogerio/Repositories/node-metrics/src",
      "caller": {
        "name": "@babel/node"
      },
      "cwd": "/home/rogerio/Repositories/node-metrics",
      "filename": "/home/rogerio/Repositories/node-metrics/src/NodeMetrics.js",
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/home/rogerio/Repositories/node-metrics",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "syntax-dynamic-import",
          "visitor": {
            "_exploded": true,
            "_verified": true
          },
          "options": {}
        },
        {
          "key": "syntax-import-meta",
          "visitor": {
            "_exploded": true,
            "_verified": true
          },
          "options": {}
        },
        {
          "key": "proposal-class-properties",
          "visitor": {
            "PrivateName": {
              "enter": [
                null
              ]
            },
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "proposal-decorators",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "legacy": true
          }
        },
        {
          "key": "proposal-function-sent",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "MetaProperty": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "proposal-export-namespace-from",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "proposal-numeric-separator",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "NumericLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "proposal-throw-expressions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "UnaryExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "loose": false
          }
        },
        {
          "key": "transform-template-literals",
          "visitor": {
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "TemplateLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-literals",
          "visitor": {
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-function-name",
          "visitor": {
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-arrow-functions",
          "visitor": {
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoped-functions",
          "visitor": {
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchCase": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-classes",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-object-super",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-shorthand-properties",
          "visitor": {
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-duplicate-keys",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-computed-properties",
          "visitor": {
            "ObjectExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-for-of",
          "visitor": {
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-sticky-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-dotall-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-spread",
          "visitor": {
            "ArrayExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-parameters",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-destructuring",
          "visitor": {
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoping",
          "visitor": {
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_verified": true,
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-typeof-symbol",
          "visitor": {
            "UnaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-new-target",
          "visitor": {
            "MetaProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "regenerator-transform",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "exit": [
                null
              ]
            },
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectMethod": {
              "exit": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "exit": [
                null
              ]
            },
            "ClassMethod": {
              "exit": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "exit": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-exponentiation-operator",
          "visitor": {
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-async-to-generator",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-async-generator-functions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-unicode-property-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-catch-binding",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CatchClause": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-named-capturing-groups-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/home/rogerio/Repositories/node-metrics/src/NodeMetrics.js",
        "plugins": [
          "dynamicImport",
          "importMeta",
          "classProperties",
          "classPrivateProperties",
          "jsonStrings",
          "decorators-legacy",
          "functionSent",
          "exportNamespaceFrom",
          "numericSeparator",
          "throwExpressions",
          "asyncGenerators",
          "objectRestSpread",
          "jsonStrings",
          "optionalCatchBinding"
        ]
      },
      "generatorOpts": {
        "filename": "/home/rogerio/Repositories/node-metrics/src/NodeMetrics.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/home/rogerio/Repositories/node-metrics/src",
        "sourceFileName": "NodeMetrics.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _influx = require(\"influx\");\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar influx;\n\nvar NodeMetrics =\n/*#__PURE__*/\nfunction () {\n  function NodeMetrics() {\n    _classCallCheck(this, NodeMetrics);\n  }\n\n  _createClass(NodeMetrics, null, [{\n    key: \"connect\",\n    value: function connect() {\n      var host = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'localhost';\n      var database = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'node_metrics';\n      if (!host) throw new Error('Host must be supplied');\n      influx = new _influx.InfluxDB({\n        host: host,\n        database: database,\n        schema: [{\n          measurement: 'express_response_times',\n          fields: {\n            duration: _influx.FieldType.INTEGER\n          },\n          tags: ['path', 'method', 'body', 'statusCode']\n        }]\n      });\n      return influx.getDatabaseNames().then(function (names) {\n        if (names.includes(database)) {\n          return;\n        }\n\n        return influx.createDatabase(database);\n      }).then(function () {\n        return true;\n      });\n    }\n  }, {\n    key: \"expressMetricsMiddleware\",\n    value: function expressMetricsMiddleware(request, response, next) {\n      var start = Date.now();\n      response.on('finish', function () {\n        var duration = Date.now() - start;\n        var path = request.path,\n            method = request.method,\n            body = request.body;\n        var statusCode = response.statusCode;\n        var tags = {\n          path: path,\n          method: method,\n          body: JSON.stringify(body),\n          statusCode: statusCode\n        };\n        var fields = {\n          duration: duration\n        };\n        influx.writePoints([{\n          measurement: 'express_response_times',\n          tags: tags,\n          fields: fields\n        }]).catch(function (err) {\n          console.error(\"Error saving data to InfluxDB! \".concat(err.stack));\n        });\n      });\n      return next();\n    }\n  }]);\n\n  return NodeMetrics;\n}();\n\nexports.default = NodeMetrics;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIk5vZGVNZXRyaWNzLmpzIl0sIm5hbWVzIjpbImluZmx1eCIsIk5vZGVNZXRyaWNzIiwiaG9zdCIsImRhdGFiYXNlIiwiRXJyb3IiLCJJbmZsdXhEQiIsInNjaGVtYSIsIm1lYXN1cmVtZW50IiwiZmllbGRzIiwiZHVyYXRpb24iLCJGaWVsZFR5cGUiLCJJTlRFR0VSIiwidGFncyIsImdldERhdGFiYXNlTmFtZXMiLCJ0aGVuIiwibmFtZXMiLCJpbmNsdWRlcyIsImNyZWF0ZURhdGFiYXNlIiwicmVxdWVzdCIsInJlc3BvbnNlIiwibmV4dCIsInN0YXJ0IiwiRGF0ZSIsIm5vdyIsIm9uIiwicGF0aCIsIm1ldGhvZCIsImJvZHkiLCJzdGF0dXNDb2RlIiwiSlNPTiIsInN0cmluZ2lmeSIsIndyaXRlUG9pbnRzIiwiY2F0Y2giLCJlcnIiLCJjb25zb2xlIiwiZXJyb3IiLCJzdGFjayJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUVBOzs7Ozs7OztBQUVBLElBQUlBLE1BQUo7O0lBRXFCQyxXOzs7Ozs7Ozs7OEJBQzZDO0FBQUEsVUFBL0NDLElBQStDLHVFQUF4QyxXQUF3QztBQUFBLFVBQTNCQyxRQUEyQix1RUFBaEIsY0FBZ0I7QUFDMUQsVUFBSSxDQUFDRCxJQUFMLEVBQVcsTUFBTSxJQUFJRSxLQUFKLENBQVUsdUJBQVYsQ0FBTjtBQUVYSixNQUFBQSxNQUFNLEdBQUcsSUFBSUssZ0JBQUosQ0FBYTtBQUNsQkgsUUFBQUEsSUFBSSxFQUFKQSxJQURrQjtBQUVsQkMsUUFBQUEsUUFBUSxFQUFSQSxRQUZrQjtBQUdsQkcsUUFBQUEsTUFBTSxFQUFFLENBQ047QUFDRUMsVUFBQUEsV0FBVyxFQUFFLHdCQURmO0FBRUVDLFVBQUFBLE1BQU0sRUFBRTtBQUNOQyxZQUFBQSxRQUFRLEVBQUVDLGtCQUFVQztBQURkLFdBRlY7QUFLRUMsVUFBQUEsSUFBSSxFQUFFLENBQ0osTUFESSxFQUVKLFFBRkksRUFHSixNQUhJLEVBSUosWUFKSTtBQUxSLFNBRE07QUFIVSxPQUFiLENBQVQ7QUFtQkEsYUFBT1osTUFBTSxDQUFDYSxnQkFBUCxHQUNGQyxJQURFLENBQ0csVUFBQUMsS0FBSyxFQUFJO0FBQ1gsWUFBR0EsS0FBSyxDQUFDQyxRQUFOLENBQWViLFFBQWYsQ0FBSCxFQUE2QjtBQUN6QjtBQUNIOztBQUNELGVBQU9ILE1BQU0sQ0FBQ2lCLGNBQVAsQ0FBc0JkLFFBQXRCLENBQVA7QUFDSCxPQU5FLEVBT0ZXLElBUEUsQ0FPRztBQUFBLGVBQU0sSUFBTjtBQUFBLE9BUEgsQ0FBUDtBQVFIOzs7NkNBRStCSSxPLEVBQVNDLFEsRUFBVUMsSSxFQUFNO0FBQ3JELFVBQU1DLEtBQUssR0FBR0MsSUFBSSxDQUFDQyxHQUFMLEVBQWQ7QUFFQUosTUFBQUEsUUFBUSxDQUFDSyxFQUFULENBQVksUUFBWixFQUFzQixZQUFNO0FBQ3hCLFlBQU1mLFFBQVEsR0FBR2EsSUFBSSxDQUFDQyxHQUFMLEtBQWFGLEtBQTlCO0FBRHdCLFlBRWhCSSxJQUZnQixHQUVPUCxPQUZQLENBRWhCTyxJQUZnQjtBQUFBLFlBRVZDLE1BRlUsR0FFT1IsT0FGUCxDQUVWUSxNQUZVO0FBQUEsWUFFRkMsSUFGRSxHQUVPVCxPQUZQLENBRUZTLElBRkU7QUFBQSxZQUdoQkMsVUFIZ0IsR0FHRFQsUUFIQyxDQUdoQlMsVUFIZ0I7QUFJeEIsWUFBTWhCLElBQUksR0FBRztBQUNUYSxVQUFBQSxJQUFJLEVBQUpBLElBRFM7QUFFVEMsVUFBQUEsTUFBTSxFQUFOQSxNQUZTO0FBR1RDLFVBQUFBLElBQUksRUFBRUUsSUFBSSxDQUFDQyxTQUFMLENBQWVILElBQWYsQ0FIRztBQUlUQyxVQUFBQSxVQUFVLEVBQUVBO0FBSkgsU0FBYjtBQU1BLFlBQU1wQixNQUFNLEdBQUc7QUFDWEMsVUFBQUEsUUFBUSxFQUFSQTtBQURXLFNBQWY7QUFJQVQsUUFBQUEsTUFBTSxDQUFDK0IsV0FBUCxDQUFtQixDQUNuQjtBQUNJeEIsVUFBQUEsV0FBVyxFQUFFLHdCQURqQjtBQUVJSyxVQUFBQSxJQUFJLEVBQUpBLElBRko7QUFHSUosVUFBQUEsTUFBTSxFQUFOQTtBQUhKLFNBRG1CLENBQW5CLEVBTUd3QixLQU5ILENBTVMsVUFBQUMsR0FBRyxFQUFJO0FBQ1pDLFVBQUFBLE9BQU8sQ0FBQ0MsS0FBUiwwQ0FBZ0RGLEdBQUcsQ0FBQ0csS0FBcEQ7QUFDSCxTQVJEO0FBU0gsT0F2QkQ7QUF3QkEsYUFBT2hCLElBQUksRUFBWDtBQUNIIiwic291cmNlUm9vdCI6Ii9ob21lL3JvZ2VyaW8vUmVwb3NpdG9yaWVzL25vZGUtbWV0cmljcy9zcmMiLCJzb3VyY2VzQ29udGVudCI6WyIvL1JFUVVJUkVTIGJvZHktcGFyc2VyXG5cbmltcG9ydCB7SW5mbHV4REIsIEZpZWxkVHlwZX0gZnJvbSAnaW5mbHV4J1xuXG5sZXQgaW5mbHV4XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE5vZGVNZXRyaWNzIHtcbiAgICBzdGF0aWMgY29ubmVjdChob3N0ID0gJ2xvY2FsaG9zdCcsIGRhdGFiYXNlID0gJ25vZGVfbWV0cmljcycpIHtcbiAgICAgICAgaWYgKCFob3N0KSB0aHJvdyBuZXcgRXJyb3IoJ0hvc3QgbXVzdCBiZSBzdXBwbGllZCcpXG4gICAgICAgIFxuICAgICAgICBpbmZsdXggPSBuZXcgSW5mbHV4REIoe1xuICAgICAgICAgICAgaG9zdCxcbiAgICAgICAgICAgIGRhdGFiYXNlLFxuICAgICAgICAgICAgc2NoZW1hOiBbXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBtZWFzdXJlbWVudDogJ2V4cHJlc3NfcmVzcG9uc2VfdGltZXMnLFxuICAgICAgICAgICAgICAgIGZpZWxkczoge1xuICAgICAgICAgICAgICAgICAgZHVyYXRpb246IEZpZWxkVHlwZS5JTlRFR0VSLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgdGFnczogW1xuICAgICAgICAgICAgICAgICAgJ3BhdGgnLFxuICAgICAgICAgICAgICAgICAgJ21ldGhvZCcsXG4gICAgICAgICAgICAgICAgICAnYm9keScsXG4gICAgICAgICAgICAgICAgICAnc3RhdHVzQ29kZScsXG4gICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBdXG4gICAgICAgIH0pXG5cbiAgICAgICAgcmV0dXJuIGluZmx1eC5nZXREYXRhYmFzZU5hbWVzKClcbiAgICAgICAgICAgIC50aGVuKG5hbWVzID0+IHtcbiAgICAgICAgICAgICAgICBpZihuYW1lcy5pbmNsdWRlcyhkYXRhYmFzZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBpbmZsdXguY3JlYXRlRGF0YWJhc2UoZGF0YWJhc2UpXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLnRoZW4oKCkgPT4gdHJ1ZSlcbiAgICB9XG5cbiAgICBzdGF0aWMgZXhwcmVzc01ldHJpY3NNaWRkbGV3YXJlKHJlcXVlc3QsIHJlc3BvbnNlLCBuZXh0KSB7XG4gICAgICAgIGNvbnN0IHN0YXJ0ID0gRGF0ZS5ub3coKVxuXG4gICAgICAgIHJlc3BvbnNlLm9uKCdmaW5pc2gnLCAoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBkdXJhdGlvbiA9IERhdGUubm93KCkgLSBzdGFydFxuICAgICAgICAgICAgY29uc3QgeyBwYXRoLCBtZXRob2QsIGJvZHkgfSA9IHJlcXVlc3RcbiAgICAgICAgICAgIGNvbnN0IHsgc3RhdHVzQ29kZSB9ID0gcmVzcG9uc2VcbiAgICAgICAgICAgIGNvbnN0IHRhZ3MgPSB7XG4gICAgICAgICAgICAgICAgcGF0aCwgXG4gICAgICAgICAgICAgICAgbWV0aG9kLCBcbiAgICAgICAgICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeShib2R5KSwgXG4gICAgICAgICAgICAgICAgc3RhdHVzQ29kZTogc3RhdHVzQ29kZSBcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGZpZWxkcyA9IHtcbiAgICAgICAgICAgICAgICBkdXJhdGlvblxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpbmZsdXgud3JpdGVQb2ludHMoW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG1lYXN1cmVtZW50OiAnZXhwcmVzc19yZXNwb25zZV90aW1lcycsXG4gICAgICAgICAgICAgICAgdGFncyxcbiAgICAgICAgICAgICAgICBmaWVsZHNcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF0pLmNhdGNoKGVyciA9PiB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihgRXJyb3Igc2F2aW5nIGRhdGEgdG8gSW5mbHV4REIhICR7ZXJyLnN0YWNrfWApXG4gICAgICAgICAgICB9KVxuICAgICAgICB9KVxuICAgICAgICByZXR1cm4gbmV4dCgpXG4gICAgfSBcbn0iXX0=",
    "map": {
      "version": 3,
      "sources": [
        "NodeMetrics.js"
      ],
      "names": [
        "influx",
        "NodeMetrics",
        "host",
        "database",
        "Error",
        "InfluxDB",
        "schema",
        "measurement",
        "fields",
        "duration",
        "FieldType",
        "INTEGER",
        "tags",
        "getDatabaseNames",
        "then",
        "names",
        "includes",
        "createDatabase",
        "request",
        "response",
        "next",
        "start",
        "Date",
        "now",
        "on",
        "path",
        "method",
        "body",
        "statusCode",
        "JSON",
        "stringify",
        "writePoints",
        "catch",
        "err",
        "console",
        "error",
        "stack"
      ],
      "mappings": ";;;;;;;AAEA;;;;;;;;AAEA,IAAIA,MAAJ;;IAEqBC,W;;;;;;;;;8BAC6C;AAAA,UAA/CC,IAA+C,uEAAxC,WAAwC;AAAA,UAA3BC,QAA2B,uEAAhB,cAAgB;AAC1D,UAAI,CAACD,IAAL,EAAW,MAAM,IAAIE,KAAJ,CAAU,uBAAV,CAAN;AAEXJ,MAAAA,MAAM,GAAG,IAAIK,gBAAJ,CAAa;AAClBH,QAAAA,IAAI,EAAJA,IADkB;AAElBC,QAAAA,QAAQ,EAARA,QAFkB;AAGlBG,QAAAA,MAAM,EAAE,CACN;AACEC,UAAAA,WAAW,EAAE,wBADf;AAEEC,UAAAA,MAAM,EAAE;AACNC,YAAAA,QAAQ,EAAEC,kBAAUC;AADd,WAFV;AAKEC,UAAAA,IAAI,EAAE,CACJ,MADI,EAEJ,QAFI,EAGJ,MAHI,EAIJ,YAJI;AALR,SADM;AAHU,OAAb,CAAT;AAmBA,aAAOZ,MAAM,CAACa,gBAAP,GACFC,IADE,CACG,UAAAC,KAAK,EAAI;AACX,YAAGA,KAAK,CAACC,QAAN,CAAeb,QAAf,CAAH,EAA6B;AACzB;AACH;;AACD,eAAOH,MAAM,CAACiB,cAAP,CAAsBd,QAAtB,CAAP;AACH,OANE,EAOFW,IAPE,CAOG;AAAA,eAAM,IAAN;AAAA,OAPH,CAAP;AAQH;;;6CAE+BI,O,EAASC,Q,EAAUC,I,EAAM;AACrD,UAAMC,KAAK,GAAGC,IAAI,CAACC,GAAL,EAAd;AAEAJ,MAAAA,QAAQ,CAACK,EAAT,CAAY,QAAZ,EAAsB,YAAM;AACxB,YAAMf,QAAQ,GAAGa,IAAI,CAACC,GAAL,KAAaF,KAA9B;AADwB,YAEhBI,IAFgB,GAEOP,OAFP,CAEhBO,IAFgB;AAAA,YAEVC,MAFU,GAEOR,OAFP,CAEVQ,MAFU;AAAA,YAEFC,IAFE,GAEOT,OAFP,CAEFS,IAFE;AAAA,YAGhBC,UAHgB,GAGDT,QAHC,CAGhBS,UAHgB;AAIxB,YAAMhB,IAAI,GAAG;AACTa,UAAAA,IAAI,EAAJA,IADS;AAETC,UAAAA,MAAM,EAANA,MAFS;AAGTC,UAAAA,IAAI,EAAEE,IAAI,CAACC,SAAL,CAAeH,IAAf,CAHG;AAITC,UAAAA,UAAU,EAAEA;AAJH,SAAb;AAMA,YAAMpB,MAAM,GAAG;AACXC,UAAAA,QAAQ,EAARA;AADW,SAAf;AAIAT,QAAAA,MAAM,CAAC+B,WAAP,CAAmB,CACnB;AACIxB,UAAAA,WAAW,EAAE,wBADjB;AAEIK,UAAAA,IAAI,EAAJA,IAFJ;AAGIJ,UAAAA,MAAM,EAANA;AAHJ,SADmB,CAAnB,EAMGwB,KANH,CAMS,UAAAC,GAAG,EAAI;AACZC,UAAAA,OAAO,CAACC,KAAR,0CAAgDF,GAAG,CAACG,KAApD;AACH,SARD;AASH,OAvBD;AAwBA,aAAOhB,IAAI,EAAX;AACH",
      "sourceRoot": "/home/rogerio/Repositories/node-metrics/src",
      "sourcesContent": [
        "//REQUIRES body-parser\n\nimport {InfluxDB, FieldType} from 'influx'\n\nlet influx\n\nexport default class NodeMetrics {\n    static connect(host = 'localhost', database = 'node_metrics') {\n        if (!host) throw new Error('Host must be supplied')\n        \n        influx = new InfluxDB({\n            host,\n            database,\n            schema: [\n              {\n                measurement: 'express_response_times',\n                fields: {\n                  duration: FieldType.INTEGER,\n                },\n                tags: [\n                  'path',\n                  'method',\n                  'body',\n                  'statusCode',\n                ]\n              }\n            ]\n        })\n\n        return influx.getDatabaseNames()\n            .then(names => {\n                if(names.includes(database)) {\n                    return\n                }\n                return influx.createDatabase(database)\n            })\n            .then(() => true)\n    }\n\n    static expressMetricsMiddleware(request, response, next) {\n        const start = Date.now()\n\n        response.on('finish', () => {\n            const duration = Date.now() - start\n            const { path, method, body } = request\n            const { statusCode } = response\n            const tags = {\n                path, \n                method, \n                body: JSON.stringify(body), \n                statusCode: statusCode \n            }\n            const fields = {\n                duration\n            }\n\n            influx.writePoints([\n            {\n                measurement: 'express_response_times',\n                tags,\n                fields\n            }\n            ]).catch(err => {\n                console.error(`Error saving data to InfluxDB! ${err.stack}`)\n            })\n        })\n        return next()\n    } \n}"
      ]
    },
    "sourceType": "script",
    "mtime": 1550262350473
  },
  "{\"sourceRoot\":\"/home/rogerio/Repositories/node-metrics/src\",\"caller\":{\"name\":\"@babel/node\"},\"cwd\":\"/home/rogerio/Repositories/node-metrics\",\"filename\":\"/home/rogerio/Repositories/node-metrics/src/index.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/home/rogerio/Repositories/node-metrics\",\"plugins\":[{\"key\":\"syntax-dynamic-import\",\"visitor\":{},\"options\":{}},{\"key\":\"syntax-import-meta\",\"visitor\":{},\"options\":{}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"proposal-decorators\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]}},\"options\":{\"legacy\":true}},{\"key\":\"proposal-class-properties\",\"visitor\":{\"PrivateName\":{\"enter\":[null]},\"ExportDefaultDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]}},\"options\":{\"loose\":true}},{\"key\":\"proposal-function-sent\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"MetaProperty\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"proposal-export-namespace-from\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"ExportNamedDeclaration\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"proposal-numeric-separator\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"NumericLiteral\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"proposal-throw-expressions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"UnaryExpression\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"loose\":false}},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"BlockStatement\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_verified\":true,\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"regenerator-transform\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ObjectMethod\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]},\"ClassMethod\":{\"exit\":[null]},\"ClassPrivateMethod\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-async-generator-functions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-catch-binding\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.2.2": {
    "metadata": {},
    "options": {
      "sourceRoot": "/home/rogerio/Repositories/node-metrics/src",
      "caller": {
        "name": "@babel/node"
      },
      "cwd": "/home/rogerio/Repositories/node-metrics",
      "filename": "/home/rogerio/Repositories/node-metrics/src/index.js",
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/home/rogerio/Repositories/node-metrics",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "syntax-dynamic-import",
          "visitor": {
            "_exploded": true,
            "_verified": true
          },
          "options": {}
        },
        {
          "key": "syntax-import-meta",
          "visitor": {
            "_exploded": true,
            "_verified": true
          },
          "options": {}
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "proposal-decorators",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "legacy": true
          }
        },
        {
          "key": "proposal-class-properties",
          "visitor": {
            "PrivateName": {
              "enter": [
                null
              ]
            },
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "loose": true
          }
        },
        {
          "key": "proposal-function-sent",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "MetaProperty": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "proposal-export-namespace-from",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "proposal-numeric-separator",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "NumericLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "proposal-throw-expressions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "UnaryExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "loose": false
          }
        },
        {
          "key": "transform-template-literals",
          "visitor": {
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "TemplateLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-literals",
          "visitor": {
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-function-name",
          "visitor": {
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-arrow-functions",
          "visitor": {
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoped-functions",
          "visitor": {
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchCase": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-classes",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-object-super",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-shorthand-properties",
          "visitor": {
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-duplicate-keys",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-computed-properties",
          "visitor": {
            "ObjectExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-for-of",
          "visitor": {
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-sticky-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-dotall-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-spread",
          "visitor": {
            "ArrayExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-parameters",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-destructuring",
          "visitor": {
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoping",
          "visitor": {
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_verified": true,
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-typeof-symbol",
          "visitor": {
            "UnaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-new-target",
          "visitor": {
            "MetaProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "regenerator-transform",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "exit": [
                null
              ]
            },
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectMethod": {
              "exit": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "exit": [
                null
              ]
            },
            "ClassMethod": {
              "exit": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "exit": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-exponentiation-operator",
          "visitor": {
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-async-to-generator",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-async-generator-functions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-unicode-property-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-catch-binding",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CatchClause": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-named-capturing-groups-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/home/rogerio/Repositories/node-metrics/src/index.js",
        "plugins": [
          "dynamicImport",
          "importMeta",
          "jsonStrings",
          "decorators-legacy",
          "classProperties",
          "classPrivateProperties",
          "functionSent",
          "exportNamespaceFrom",
          "numericSeparator",
          "throwExpressions",
          "asyncGenerators",
          "objectRestSpread",
          "jsonStrings",
          "optionalCatchBinding"
        ]
      },
      "generatorOpts": {
        "filename": "/home/rogerio/Repositories/node-metrics/src/index.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/home/rogerio/Repositories/node-metrics/src",
        "sourceFileName": "index.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _influx = require(\"influx\");\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar influx;\n\nvar NodeMetrics =\n/*#__PURE__*/\nfunction () {\n  function NodeMetrics() {\n    _classCallCheck(this, NodeMetrics);\n  }\n\n  _createClass(NodeMetrics, null, [{\n    key: \"connect\",\n    value: function connect(host) {\n      var database = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'node_metrics';\n\n      var createDatabaseIfNotExistant = function createDatabaseIfNotExistant(names) {\n        if (names.includes(database)) {\n          return Promise.resolve();\n        }\n\n        return influx.createDatabase(database);\n      };\n\n      var nullifyInfluxAndLogError = function nullifyInfluxAndLogError(_ref) {\n        var stack = _ref.stack;\n        influx = null;\n        console.error(\"[\".concat(new Date().toISOString(), \"] Unable to connect to InfluxDB: \").concat(stack));\n      };\n\n      influx = new _influx.InfluxDB({\n        host: host,\n        database: database,\n        schema: [{\n          measurement: 'express_response_times',\n          fields: {\n            mean: _influx.FieldType.INTEGER,\n            count: _influx.FieldType.INTEGER,\n            upper: _influx.FieldType.INTEGER,\n            sum: _influx.FieldType.INTEGER\n          },\n          tags: ['path', 'method', 'status_code', 'outcome' //SUCCESS, CLIENT_ERROR, SERVER_ERROR\n          ]\n        }, {\n          measurement: 'promise_response_times',\n          fields: {\n            mean: _influx.FieldType.INTEGER,\n            count: _influx.FieldType.INTEGER,\n            upper: _influx.FieldType.INTEGER,\n            sum: _influx.FieldType.INTEGER\n          },\n          tags: ['asynchronousFunction', 'exception', 'outcome']\n        }, {\n          measurement: 'fetch_response_times',\n          fields: {\n            mean: _influx.FieldType.INTEGER,\n            count: _influx.FieldType.INTEGER,\n            upper: _influx.FieldType.INTEGER,\n            sum: _influx.FieldType.INTEGER\n          },\n          tags: ['url', 'method', 'status_code', 'outcome']\n        }]\n      });\n      return influx.getDatabaseNames().then(createDatabaseIfNotExistant).catch(nullifyInfluxAndLogError);\n    }\n  }, {\n    key: \"sendMetrics\",\n    value: function sendMetrics(measurement, tags, fields) {\n      return influx.writePoints([{\n        measurement: measurement,\n        tags: tags,\n        fields: fields\n      }]).catch(function (err) {\n        return console.error(\"Error saving data to InfluxDB! \".concat(err.stack));\n      });\n    }\n  }, {\n    key: \"expressMetricsMiddleware\",\n    value: function expressMetricsMiddleware(request, response, next) {\n      var start = Date.now();\n\n      var sendExpressMetrics = function sendExpressMetrics() {\n        var duration = Date.now() - start;\n        var count = 1;\n        var mean = duration;\n        var sum = duration;\n        var upper = duration;\n        var fields = {\n          count: count,\n          mean: mean,\n          sum: sum,\n          upper: upper\n        };\n        var path = request.path,\n            method = request.method;\n        var statusCode = response.statusCode;\n        var outcome = statusCode < 400 ? \"SUCCESS\" : statusCode < 500 ? \"CLIENT_ERROR\" : \"SERVER_ERROR\";\n        var tags = {\n          path: path,\n          method: method,\n          status_code: statusCode,\n          outcome: outcome\n        };\n        NodeMetrics.sendMetrics('express_response_times', tags, fields);\n      };\n\n      if (influx) {\n        response.on('finish', sendExpressMetrics);\n      }\n\n      return next();\n    }\n  }, {\n    key: \"metrifyAsynchronousFunction\",\n    value: function metrifyAsynchronousFunction(asynchronousFunction) {\n      var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n        measurement: 'promise_response_times'\n      },\n          measurement = _ref2.measurement;\n\n      var metrifiedAsynchronousFunction = function metrifiedAsynchronousFunction() {\n        var start = Date.now();\n\n        var sendMetrics = function sendMetrics(tags) {\n          var duration = Date.now() - start;\n          var count = 1;\n          var mean = duration;\n          var sum = duration;\n          var upper = duration;\n          var fields = {\n            count: count,\n            mean: mean,\n            sum: sum,\n            upper: upper\n          };\n          NodeMetrics.sendMetrics(measurement, tags, fields);\n        };\n\n        var sendSuccessMetrics = function sendSuccessMetrics(response) {\n          var outcome = 'SUCCESS';\n          var tags = {\n            asynchronousFunction: asynchronousFunction.name,\n            outcome: outcome\n          };\n          sendMetrics(tags);\n          return response;\n        };\n\n        var sendExceptionMetrics = function sendExceptionMetrics(exception) {\n          var outcome = exception instanceof Error ? 'ERROR' : 'EXCEPTION';\n          var exceptionName = exception instanceof Error ? exception.name : exception;\n          var tags = {\n            asynchronousFunction: asynchronousFunction.name,\n            outcome: outcome,\n            exception: exceptionName\n          };\n          sendMetrics(tags);\n          throw exception;\n        };\n\n        return asynchronousFunction.apply(void 0, arguments).then(sendSuccessMetrics).catch(sendExceptionMetrics);\n      };\n\n      if (!influx) {\n        return asynchronousFunction;\n      }\n\n      return metrifiedAsynchronousFunction;\n    }\n  }, {\n    key: \"metrifyFetch\",\n    value: function metrifyFetch(fetch) {\n      var _ref3 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n        measurement: 'fetch_response_times'\n      },\n          measurement = _ref3.measurement;\n\n      var metrifiedFetch = function metrifiedFetch(url) {\n        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        var start = Date.now();\n\n        var sendFetchMetrics = function sendFetchMetrics(response) {\n          var duration = Date.now() - start;\n          var count = 1;\n          var mean = duration;\n          var sum = duration;\n          var upper = duration;\n          var fields = {\n            count: count,\n            mean: mean,\n            sum: sum,\n            upper: upper\n          };\n          var method = options.method || 'GET';\n          var statusCode = response.status;\n          var outcome = statusCode < 400 ? \"SUCCESS\" : statusCode < 500 ? \"CLIENT_ERROR\" : \"SERVER_ERROR\";\n          var tags = {\n            url: url,\n            method: method,\n            status_code: statusCode,\n            outcome: outcome\n          };\n          NodeMetrics.sendMetrics(measurement, tags, fields);\n          return response;\n        };\n\n        for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n          args[_key - 2] = arguments[_key];\n        }\n\n        return fetch.apply(void 0, [url, options].concat(args)).then(sendFetchMetrics);\n      };\n\n      if (!influx) {\n        return fetch;\n      }\n\n      return metrifiedFetch;\n    }\n  }]);\n\n  return NodeMetrics;\n}();\n\nexports.default = NodeMetrics;\n\nif (process.env.NODE_METRICS_HOST) {\n  NodeMetrics.connect(process.env.NODE_METRICS_HOST, process.env.NODE_METRICS_DATABASE);\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,",
    "map": {
      "version": 3,
      "sources": [
        "index.js"
      ],
      "names": [
        "influx",
        "NodeMetrics",
        "host",
        "database",
        "createDatabaseIfNotExistant",
        "names",
        "includes",
        "Promise",
        "resolve",
        "createDatabase",
        "nullifyInfluxAndLogError",
        "stack",
        "console",
        "error",
        "Date",
        "toISOString",
        "InfluxDB",
        "schema",
        "measurement",
        "fields",
        "mean",
        "FieldType",
        "INTEGER",
        "count",
        "upper",
        "sum",
        "tags",
        "getDatabaseNames",
        "then",
        "catch",
        "writePoints",
        "err",
        "request",
        "response",
        "next",
        "start",
        "now",
        "sendExpressMetrics",
        "duration",
        "path",
        "method",
        "statusCode",
        "outcome",
        "status_code",
        "sendMetrics",
        "on",
        "asynchronousFunction",
        "metrifiedAsynchronousFunction",
        "sendSuccessMetrics",
        "name",
        "sendExceptionMetrics",
        "exception",
        "Error",
        "exceptionName",
        "fetch",
        "metrifiedFetch",
        "url",
        "options",
        "sendFetchMetrics",
        "status",
        "args",
        "process",
        "env",
        "NODE_METRICS_HOST",
        "connect",
        "NODE_METRICS_DATABASE"
      ],
      "mappings": "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",
      "sourceRoot": "/home/rogerio/Repositories/node-metrics/src",
      "sourcesContent": [
        "//REQUIRES body-parser\nimport {InfluxDB, FieldType} from 'influx'\n\nlet influx\n\nexport default class NodeMetrics {\n    static connect(host, database = 'node_metrics') {\n        const createDatabaseIfNotExistant = names => {\n            if(names.includes(database)) {\n                return Promise.resolve()\n            }\n            return influx.createDatabase(database)\n        }\n        const nullifyInfluxAndLogError = ({stack}) => {\n            influx = null\n            console.error(`[${(new Date()).toISOString()}] Unable to connect to InfluxDB: ${stack}`)\n        }\n\n        influx = new InfluxDB({\n            host,\n            database,\n            schema: [\n                {\n                    measurement: 'express_response_times',\n                    fields: {\n                        mean: FieldType.INTEGER,\n                        count: FieldType.INTEGER,\n                        upper: FieldType.INTEGER,\n                        sum: FieldType.INTEGER,\n                    },\n                    tags: [\n                        'path',\n                        'method',\n                        'status_code',\n                        'outcome' //SUCCESS, CLIENT_ERROR, SERVER_ERROR\n                    ]\n                },\n                {\n                    measurement: 'promise_response_times',\n                    fields: {\n                        mean: FieldType.INTEGER,\n                        count: FieldType.INTEGER,\n                        upper: FieldType.INTEGER,\n                        sum: FieldType.INTEGER,\n                    },\n                    tags: [\n                        'asynchronousFunction',\n                        'exception',\n                        'outcome'\n                    ]\n                },\n                {\n                    measurement: 'fetch_response_times',\n                    fields: {\n                        mean: FieldType.INTEGER,\n                        count: FieldType.INTEGER,\n                        upper: FieldType.INTEGER,\n                        sum: FieldType.INTEGER,\n                    },\n                    tags: [\n                        'url',\n                        'method',\n                        'status_code',\n                        'outcome'\n                    ]\n                }\n            ]\n        })\n\n        return influx.getDatabaseNames()\n            .then(createDatabaseIfNotExistant)\n            .catch(nullifyInfluxAndLogError) \n    }\n\n    static sendMetrics(measurement, tags, fields) {\n        return influx.writePoints([{ measurement, tags, fields }])\n            .catch(err => console.error(`Error saving data to InfluxDB! ${err.stack}`))\n    }\n\n    static expressMetricsMiddleware(request, response, next) {\n        const start = Date.now()\n        const sendExpressMetrics = () => {\n            const duration = Date.now() - start\n            const count = 1\n            const mean = duration\n            const sum = duration\n            const upper = duration\n            const fields = {\n                count,\n                mean,\n                sum,\n                upper\n            }\n            const { path, method } = request\n            const { statusCode } = response\n            const outcome = statusCode < 400 ? ( \n                \"SUCCESS\"\n                ) : ( \n                statusCode < 500 ? ( \n                    \"CLIENT_ERROR\"\n                    ) : (\n                    \"SERVER_ERROR\"\n                )\n            )\n            const tags = {\n                path, \n                method, \n                status_code: statusCode,\n                outcome\n            }\n\n            NodeMetrics.sendMetrics('express_response_times', tags, fields)\n        }\n\n        if (influx) {\n            response.on('finish', sendExpressMetrics)\n        }\n\n        return next()\n    }\n\n    static metrifyAsynchronousFunction(\n        asynchronousFunction, \n        { \n            measurement\n        } = {\n            measurement: 'promise_response_times'\n        }\n    ) {\n        const metrifiedAsynchronousFunction = (...args) => {\n            const start = Date.now()\n            const sendMetrics = (tags) => {\n                const duration = Date.now() - start \n                const count = 1\n                const mean = duration\n                const sum = duration\n                const upper = duration\n                const fields = {\n                    count,\n                    mean,\n                    sum,\n                    upper\n                }\n                NodeMetrics.sendMetrics(measurement, tags, fields)\n            }\n            const sendSuccessMetrics = response => {\n                const outcome = 'SUCCESS'\n                const tags = {\n                    asynchronousFunction: asynchronousFunction.name,\n                    outcome\n                }\n                sendMetrics(tags)\n                return response\n            }\n            const sendExceptionMetrics = exception => {\n                const outcome = exception instanceof Error ? (\n                    'ERROR'\n                    ) : (\n                    'EXCEPTION'\n                )\n                const exceptionName = exception instanceof Error ? (\n                    exception.name\n                    ) : (\n                    exception\n                )\n                const tags = {\n                    asynchronousFunction: asynchronousFunction.name,\n                    outcome,\n                    exception: exceptionName\n                }\n                sendMetrics(tags)\n                throw exception\n            }\n\n            return asynchronousFunction(...args)\n                .then(sendSuccessMetrics)\n                .catch(sendExceptionMetrics)\n        }\n\n        if(!influx) {\n            return asynchronousFunction\n        }\n        return metrifiedAsynchronousFunction\n    }\n\n    static metrifyFetch(\n        fetch, \n        {\n            measurement\n        } = {\n            measurement: 'fetch_response_times'\n        }\n    ) {\n        const metrifiedFetch = (url, options = {}, ...args) => {\n            const start = Date.now()\n            const sendFetchMetrics = response => {\n                const duration = Date.now() - start \n                const count = 1\n                const mean = duration\n                const sum = duration\n                const upper = duration\n                const fields = {\n                    count,\n                    mean,\n                    sum,\n                    upper\n                }\n                const method = options.method || 'GET'\n                const statusCode = response.status\n                const outcome = statusCode < 400 ? ( \n                    \"SUCCESS\"\n                    ) : ( \n                    statusCode < 500 ? ( \n                        \"CLIENT_ERROR\"\n                        ) : (\n                        \"SERVER_ERROR\"\n                    )\n                )\n                const tags = {\n                    url, \n                    method,\n                    status_code: statusCode,\n                    outcome\n                }\n                NodeMetrics.sendMetrics(measurement, tags, fields)\n\n                return response\n            }\n\n            return fetch(url, options, ...args)\n            .then(sendFetchMetrics)\n        }\n\n        if(!influx) {\n            return fetch\n        }\n        return metrifiedFetch\n    }\n}\n\nif(process.env.NODE_METRICS_HOST) {\n    NodeMetrics.connect(process.env.NODE_METRICS_HOST, process.env.NODE_METRICS_DATABASE)    \n}\n"
      ]
    },
    "sourceType": "script",
    "mtime": 1551467758705
  },
  "{\"sourceRoot\":\"/home/rogerio/Repositories/node-metrics/src\",\"caller\":{\"name\":\"@babel/node\"},\"cwd\":\"/home/rogerio/Repositories/node-metrics\",\"filename\":\"/home/rogerio/Repositories/node-metrics/src/NodeMetrics.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/home/rogerio/Repositories/node-metrics\",\"plugins\":[{\"key\":\"syntax-dynamic-import\",\"visitor\":{\"_exploded\":true,\"_verified\":true},\"options\":{}},{\"key\":\"syntax-import-meta\",\"visitor\":{\"_exploded\":true,\"_verified\":true},\"options\":{}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"proposal-decorators\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]}},\"options\":{\"legacy\":true}},{\"key\":\"proposal-class-properties\",\"visitor\":{\"PrivateName\":{\"enter\":[null]},\"ExportDefaultDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]}},\"options\":{\"loose\":true}},{\"key\":\"proposal-function-sent\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"MetaProperty\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"proposal-export-namespace-from\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"ExportNamedDeclaration\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"proposal-numeric-separator\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"NumericLiteral\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"proposal-throw-expressions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"UnaryExpression\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"loose\":false}},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"BlockStatement\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_verified\":true,\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"regenerator-transform\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ObjectMethod\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]},\"ClassMethod\":{\"exit\":[null]},\"ClassPrivateMethod\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-async-generator-functions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-catch-binding\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.2.2": {
    "metadata": {},
    "options": {
      "sourceRoot": "/home/rogerio/Repositories/node-metrics/src",
      "caller": {
        "name": "@babel/node"
      },
      "cwd": "/home/rogerio/Repositories/node-metrics",
      "filename": "/home/rogerio/Repositories/node-metrics/src/NodeMetrics.js",
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/home/rogerio/Repositories/node-metrics",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "syntax-dynamic-import",
          "visitor": {
            "_exploded": true,
            "_verified": true
          },
          "options": {}
        },
        {
          "key": "syntax-import-meta",
          "visitor": {
            "_exploded": true,
            "_verified": true
          },
          "options": {}
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "proposal-decorators",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "legacy": true
          }
        },
        {
          "key": "proposal-class-properties",
          "visitor": {
            "PrivateName": {
              "enter": [
                null
              ]
            },
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "loose": true
          }
        },
        {
          "key": "proposal-function-sent",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "MetaProperty": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "proposal-export-namespace-from",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "proposal-numeric-separator",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "NumericLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "proposal-throw-expressions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "UnaryExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "loose": false
          }
        },
        {
          "key": "transform-template-literals",
          "visitor": {
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "TemplateLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-literals",
          "visitor": {
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-function-name",
          "visitor": {
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-arrow-functions",
          "visitor": {
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoped-functions",
          "visitor": {
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchCase": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-classes",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-object-super",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-shorthand-properties",
          "visitor": {
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-duplicate-keys",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-computed-properties",
          "visitor": {
            "ObjectExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-for-of",
          "visitor": {
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-sticky-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-dotall-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-spread",
          "visitor": {
            "ArrayExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-parameters",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-destructuring",
          "visitor": {
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoping",
          "visitor": {
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_verified": true,
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-typeof-symbol",
          "visitor": {
            "UnaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-new-target",
          "visitor": {
            "MetaProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "regenerator-transform",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "exit": [
                null
              ]
            },
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectMethod": {
              "exit": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "exit": [
                null
              ]
            },
            "ClassMethod": {
              "exit": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "exit": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-exponentiation-operator",
          "visitor": {
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-async-to-generator",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-async-generator-functions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-unicode-property-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-catch-binding",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CatchClause": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-named-capturing-groups-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/home/rogerio/Repositories/node-metrics/src/NodeMetrics.js",
        "plugins": [
          "dynamicImport",
          "importMeta",
          "jsonStrings",
          "decorators-legacy",
          "classProperties",
          "classPrivateProperties",
          "functionSent",
          "exportNamespaceFrom",
          "numericSeparator",
          "throwExpressions",
          "asyncGenerators",
          "objectRestSpread",
          "jsonStrings",
          "optionalCatchBinding"
        ]
      },
      "generatorOpts": {
        "filename": "/home/rogerio/Repositories/node-metrics/src/NodeMetrics.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/home/rogerio/Repositories/node-metrics/src",
        "sourceFileName": "NodeMetrics.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _influx = require(\"influx\");\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar influx;\n\nvar NodeMetrics =\n/*#__PURE__*/\nfunction () {\n  function NodeMetrics() {\n    _classCallCheck(this, NodeMetrics);\n  }\n\n  _createClass(NodeMetrics, null, [{\n    key: \"connect\",\n    value: function connect(host) {\n      var database = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'node_metrics';\n\n      var createDatabaseIfNotExistant = function createDatabaseIfNotExistant(names) {\n        if (names.includes(database)) {\n          return Promise.resolve();\n        }\n\n        return influx.createDatabase(database);\n      };\n\n      var nullifyInfluxAndLogError = function nullifyInfluxAndLogError(_ref) {\n        var stack = _ref.stack;\n        influx = null;\n        console.error(\"[\".concat(new Date().toISOString(), \"] Unable to connect to InfluxDB: \").concat(stack));\n      };\n\n      influx = new _influx.InfluxDB({\n        host: host,\n        database: database,\n        schema: [{\n          measurement: 'express_response_times',\n          fields: {\n            mean: _influx.FieldType.INTEGER,\n            count: _influx.FieldType.INTEGER,\n            upper: _influx.FieldType.INTEGER,\n            sum: _influx.FieldType.INTEGER\n          },\n          tags: ['path', 'method', 'status_code', 'outcome' //SUCCESS, CLIENT_ERROR, SERVER_ERROR\n          ]\n        }, {\n          measurement: 'promise_response_times',\n          fields: {\n            mean: _influx.FieldType.INTEGER,\n            count: _influx.FieldType.INTEGER,\n            upper: _influx.FieldType.INTEGER,\n            sum: _influx.FieldType.INTEGER\n          },\n          tags: ['asynchronousFunction', 'exception', 'outcome']\n        }, {\n          measurement: 'fetch_response_times',\n          fields: {\n            mean: _influx.FieldType.INTEGER,\n            count: _influx.FieldType.INTEGER,\n            upper: _influx.FieldType.INTEGER,\n            sum: _influx.FieldType.INTEGER\n          },\n          tags: ['url', 'method', 'status_code', 'outcome']\n        }]\n      });\n      return influx.getDatabaseNames().then(createDatabaseIfNotExistant).catch(nullifyInfluxAndLogError);\n    }\n  }, {\n    key: \"sendMetrics\",\n    value: function sendMetrics(measurement, tags, fields) {\n      return influx.writePoints([{\n        measurement: measurement,\n        tags: tags,\n        fields: fields\n      }]).catch(function (err) {\n        return console.error(\"Error saving data to InfluxDB! \".concat(err.stack));\n      });\n    }\n  }, {\n    key: \"expressMetricsMiddleware\",\n    value: function expressMetricsMiddleware(request, response, next) {\n      var start = Date.now();\n\n      var sendExpressMetrics = function sendExpressMetrics() {\n        var duration = Date.now() - start;\n        var count = 1;\n        var mean = duration;\n        var sum = duration;\n        var upper = duration;\n        var fields = {\n          count: count,\n          mean: mean,\n          sum: sum,\n          upper: upper\n        };\n        var path = request.path,\n            method = request.method;\n        var statusCode = response.statusCode;\n        var outcome = statusCode < 400 ? \"SUCCESS\" : statusCode < 500 ? \"CLIENT_ERROR\" : \"SERVER_ERROR\";\n        var tags = {\n          path: path,\n          method: method,\n          status_code: statusCode,\n          outcome: outcome\n        };\n        NodeMetrics.sendMetrics('express_response_times', tags, fields);\n      };\n\n      if (influx) {\n        response.on('finish', sendExpressMetrics);\n      }\n\n      return next();\n    }\n  }, {\n    key: \"metrifyAsynchronousFunction\",\n    value: function metrifyAsynchronousFunction(asynchronousFunction) {\n      var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n        measurement: 'promise_response_times'\n      },\n          measurement = _ref2.measurement;\n\n      var metrifiedAsynchronousFunction = function metrifiedAsynchronousFunction() {\n        var start = Date.now();\n\n        var sendMetrics = function sendMetrics(tags) {\n          var duration = Date.now() - start;\n          var count = 1;\n          var mean = duration;\n          var sum = duration;\n          var upper = duration;\n          var fields = {\n            count: count,\n            mean: mean,\n            sum: sum,\n            upper: upper\n          };\n          NodeMetrics.sendMetrics(measurement, tags, fields);\n        };\n\n        var sendSuccessMetrics = function sendSuccessMetrics(response) {\n          var outcome = 'SUCCESS';\n          var tags = {\n            asynchronousFunction: asynchronousFunction.name,\n            outcome: outcome\n          };\n          sendMetrics(tags);\n          return response;\n        };\n\n        var sendExceptionMetrics = function sendExceptionMetrics(exception) {\n          var outcome = exception instanceof Error ? 'ERROR' : 'EXCEPTION';\n          var exceptionName = exception instanceof Error ? exception.name : exception;\n          var tags = {\n            asynchronousFunction: asynchronousFunction.name,\n            outcome: outcome,\n            exception: exceptionName\n          };\n          sendMetrics(tags);\n          throw exception;\n        };\n\n        return asynchronousFunction.apply(void 0, arguments).then(sendSuccessMetrics).catch(sendExceptionMetrics);\n      };\n\n      if (!influx) {\n        return asynchronousFunction;\n      }\n\n      return metrifiedAsynchronousFunction;\n    }\n  }, {\n    key: \"metrifyFetch\",\n    value: function metrifyFetch(fetch) {\n      var _ref3 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n        measurement: 'fetch_response_times'\n      },\n          measurement = _ref3.measurement;\n\n      var metrifiedFetch = function metrifiedFetch(url) {\n        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        var start = Date.now();\n\n        var sendFetchMetrics = function sendFetchMetrics(response) {\n          var duration = Date.now() - start;\n          var count = 1;\n          var mean = duration;\n          var sum = duration;\n          var upper = duration;\n          var fields = {\n            count: count,\n            mean: mean,\n            sum: sum,\n            upper: upper\n          };\n          var method = options.method || 'GET';\n          var statusCode = response.status;\n          var outcome = statusCode < 400 ? \"SUCCESS\" : statusCode < 500 ? \"CLIENT_ERROR\" : \"SERVER_ERROR\";\n          var tags = {\n            url: url,\n            method: method,\n            status_code: statusCode,\n            outcome: outcome\n          };\n          NodeMetrics.sendMetrics(measurement, tags, fields);\n          return response;\n        };\n\n        for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n          args[_key - 2] = arguments[_key];\n        }\n\n        return fetch.apply(void 0, [url, options].concat(args)).then(sendFetchMetrics);\n      };\n\n      if (!influx) {\n        return fetch;\n      }\n\n      return metrifiedFetch;\n    }\n  }]);\n\n  return NodeMetrics;\n}();\n\nexports.default = NodeMetrics;\n\nif (process.env.NODE_METRICS_HOST) {\n  NodeMetrics.connect(process.env.NODE_METRICS_HOST, process.env.NODE_METRICS_DATABASE);\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,",
    "map": {
      "version": 3,
      "sources": [
        "NodeMetrics.js"
      ],
      "names": [
        "influx",
        "NodeMetrics",
        "host",
        "database",
        "createDatabaseIfNotExistant",
        "names",
        "includes",
        "Promise",
        "resolve",
        "createDatabase",
        "nullifyInfluxAndLogError",
        "stack",
        "console",
        "error",
        "Date",
        "toISOString",
        "InfluxDB",
        "schema",
        "measurement",
        "fields",
        "mean",
        "FieldType",
        "INTEGER",
        "count",
        "upper",
        "sum",
        "tags",
        "getDatabaseNames",
        "then",
        "catch",
        "writePoints",
        "err",
        "request",
        "response",
        "next",
        "start",
        "now",
        "sendExpressMetrics",
        "duration",
        "path",
        "method",
        "statusCode",
        "outcome",
        "status_code",
        "sendMetrics",
        "on",
        "asynchronousFunction",
        "metrifiedAsynchronousFunction",
        "sendSuccessMetrics",
        "name",
        "sendExceptionMetrics",
        "exception",
        "Error",
        "exceptionName",
        "fetch",
        "metrifiedFetch",
        "url",
        "options",
        "sendFetchMetrics",
        "status",
        "args",
        "process",
        "env",
        "NODE_METRICS_HOST",
        "connect",
        "NODE_METRICS_DATABASE"
      ],
      "mappings": "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",
      "sourceRoot": "/home/rogerio/Repositories/node-metrics/src",
      "sourcesContent": [
        "//REQUIRES body-parser\nimport {InfluxDB, FieldType} from 'influx'\n\nlet influx\n\nexport default class NodeMetrics {\n    static connect(host, database = 'node_metrics') {\n        const createDatabaseIfNotExistant = names => {\n            if(names.includes(database)) {\n                return Promise.resolve()\n            }\n            return influx.createDatabase(database)\n        }\n        const nullifyInfluxAndLogError = ({stack}) => {\n            influx = null\n            console.error(`[${(new Date()).toISOString()}] Unable to connect to InfluxDB: ${stack}`)\n        }\n\n        influx = new InfluxDB({\n            host,\n            database,\n            schema: [\n                {\n                    measurement: 'express_response_times',\n                    fields: {\n                        mean: FieldType.INTEGER,\n                        count: FieldType.INTEGER,\n                        upper: FieldType.INTEGER,\n                        sum: FieldType.INTEGER,\n                    },\n                    tags: [\n                        'path',\n                        'method',\n                        'status_code',\n                        'outcome' //SUCCESS, CLIENT_ERROR, SERVER_ERROR\n                    ]\n                },\n                {\n                    measurement: 'promise_response_times',\n                    fields: {\n                        mean: FieldType.INTEGER,\n                        count: FieldType.INTEGER,\n                        upper: FieldType.INTEGER,\n                        sum: FieldType.INTEGER,\n                    },\n                    tags: [\n                        'asynchronousFunction',\n                        'exception',\n                        'outcome'\n                    ]\n                },\n                {\n                    measurement: 'fetch_response_times',\n                    fields: {\n                        mean: FieldType.INTEGER,\n                        count: FieldType.INTEGER,\n                        upper: FieldType.INTEGER,\n                        sum: FieldType.INTEGER,\n                    },\n                    tags: [\n                        'url',\n                        'method',\n                        'status_code',\n                        'outcome'\n                    ]\n                }\n            ]\n        })\n\n        return influx.getDatabaseNames()\n            .then(createDatabaseIfNotExistant)\n            .catch(nullifyInfluxAndLogError) \n    }\n\n    static sendMetrics(measurement, tags, fields) {\n        return influx.writePoints([{ measurement, tags, fields }])\n            .catch(err => console.error(`Error saving data to InfluxDB! ${err.stack}`))\n    }\n\n    static expressMetricsMiddleware(request, response, next) {\n        const start = Date.now()\n        const sendExpressMetrics = () => {\n            const duration = Date.now() - start\n            const count = 1\n            const mean = duration\n            const sum = duration\n            const upper = duration\n            const fields = {\n                count,\n                mean,\n                sum,\n                upper\n            }\n            const { path, method } = request\n            const { statusCode } = response\n            const outcome = statusCode < 400 ? ( \n                \"SUCCESS\"\n                ) : ( \n                statusCode < 500 ? ( \n                    \"CLIENT_ERROR\"\n                    ) : (\n                    \"SERVER_ERROR\"\n                )\n            )\n            const tags = {\n                path, \n                method, \n                status_code: statusCode,\n                outcome\n            }\n\n            NodeMetrics.sendMetrics('express_response_times', tags, fields)\n        }\n\n        if (influx) {\n            response.on('finish', sendExpressMetrics)\n        }\n\n        return next()\n    }\n\n    static metrifyAsynchronousFunction(\n        asynchronousFunction, \n        { \n            measurement\n        } = {\n            measurement: 'promise_response_times'\n        }\n    ) {\n        const metrifiedAsynchronousFunction = (...args) => {\n            const start = Date.now()\n            const sendMetrics = (tags) => {\n                const duration = Date.now() - start \n                const count = 1\n                const mean = duration\n                const sum = duration\n                const upper = duration\n                const fields = {\n                    count,\n                    mean,\n                    sum,\n                    upper\n                }\n                NodeMetrics.sendMetrics(measurement, tags, fields)\n            }\n            const sendSuccessMetrics = response => {\n                const outcome = 'SUCCESS'\n                const tags = {\n                    asynchronousFunction: asynchronousFunction.name,\n                    outcome\n                }\n                sendMetrics(tags)\n                return response\n            }\n            const sendExceptionMetrics = exception => {\n                const outcome = exception instanceof Error ? (\n                    'ERROR'\n                    ) : (\n                    'EXCEPTION'\n                )\n                const exceptionName = exception instanceof Error ? (\n                    exception.name\n                    ) : (\n                    exception\n                )\n                const tags = {\n                    asynchronousFunction: asynchronousFunction.name,\n                    outcome,\n                    exception: exceptionName\n                }\n                sendMetrics(tags)\n                throw exception\n            }\n\n            return asynchronousFunction(...args)\n                .then(sendSuccessMetrics)\n                .catch(sendExceptionMetrics)\n        }\n\n        if(!influx) {\n            return asynchronousFunction\n        }\n        return metrifiedAsynchronousFunction\n    }\n\n    static metrifyFetch(\n        fetch, \n        {\n            measurement\n        } = {\n            measurement: 'fetch_response_times'\n        }\n    ) {\n        const metrifiedFetch = (url, options = {}, ...args) => {\n            const start = Date.now()\n            const sendFetchMetrics = response => {\n                const duration = Date.now() - start \n                const count = 1\n                const mean = duration\n                const sum = duration\n                const upper = duration\n                const fields = {\n                    count,\n                    mean,\n                    sum,\n                    upper\n                }\n                const method = options.method || 'GET'\n                const statusCode = response.status\n                const outcome = statusCode < 400 ? ( \n                    \"SUCCESS\"\n                    ) : ( \n                    statusCode < 500 ? ( \n                        \"CLIENT_ERROR\"\n                        ) : (\n                        \"SERVER_ERROR\"\n                    )\n                )\n                const tags = {\n                    url, \n                    method,\n                    status_code: statusCode,\n                    outcome\n                }\n                NodeMetrics.sendMetrics(measurement, tags, fields)\n\n                return response\n            }\n\n            return fetch(url, options, ...args)\n            .then(sendFetchMetrics)\n        }\n\n        if(!influx) {\n            return fetch\n        }\n        return metrifiedFetch\n    }\n}\n\nif(process.env.NODE_METRICS_HOST) {\n    NodeMetrics.connect(process.env.NODE_METRICS_HOST, process.env.NODE_METRICS_DATABASE)    \n}\n"
      ]
    },
    "sourceType": "script",
    "mtime": 1551466618442
  },
  "{\"sourceRoot\":\"/home/rogerio/Repositories/node-metrics/src\",\"caller\":{\"name\":\"@babel/node\"},\"cwd\":\"/home/rogerio/Repositories/node-metrics\",\"filename\":\"/home/rogerio/Repositories/node-metrics/src/NodeMetrics.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/home/rogerio/Repositories/node-metrics\",\"plugins\":[{\"key\":\"syntax-dynamic-import\",\"visitor\":{},\"options\":{}},{\"key\":\"syntax-import-meta\",\"visitor\":{},\"options\":{}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"proposal-decorators\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]}},\"options\":{\"legacy\":true}},{\"key\":\"proposal-class-properties\",\"visitor\":{\"PrivateName\":{\"enter\":[null]},\"ExportDefaultDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]}},\"options\":{\"loose\":true}},{\"key\":\"proposal-function-sent\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"MetaProperty\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"proposal-export-namespace-from\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"ExportNamedDeclaration\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"proposal-numeric-separator\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"NumericLiteral\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"proposal-throw-expressions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"UnaryExpression\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"loose\":false}},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"BlockStatement\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_verified\":true,\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"regenerator-transform\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ObjectMethod\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]},\"ClassMethod\":{\"exit\":[null]},\"ClassPrivateMethod\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-async-generator-functions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-catch-binding\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.2.2": {
    "metadata": {},
    "options": {
      "sourceRoot": "/home/rogerio/Repositories/node-metrics/src",
      "caller": {
        "name": "@babel/node"
      },
      "cwd": "/home/rogerio/Repositories/node-metrics",
      "filename": "/home/rogerio/Repositories/node-metrics/src/NodeMetrics.js",
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/home/rogerio/Repositories/node-metrics",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "syntax-dynamic-import",
          "visitor": {
            "_exploded": true,
            "_verified": true
          },
          "options": {}
        },
        {
          "key": "syntax-import-meta",
          "visitor": {
            "_exploded": true,
            "_verified": true
          },
          "options": {}
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "proposal-decorators",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "legacy": true
          }
        },
        {
          "key": "proposal-class-properties",
          "visitor": {
            "PrivateName": {
              "enter": [
                null
              ]
            },
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "loose": true
          }
        },
        {
          "key": "proposal-function-sent",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "MetaProperty": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "proposal-export-namespace-from",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "proposal-numeric-separator",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "NumericLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "proposal-throw-expressions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "UnaryExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "loose": false
          }
        },
        {
          "key": "transform-template-literals",
          "visitor": {
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "TemplateLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-literals",
          "visitor": {
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-function-name",
          "visitor": {
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-arrow-functions",
          "visitor": {
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoped-functions",
          "visitor": {
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchCase": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-classes",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-object-super",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-shorthand-properties",
          "visitor": {
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-duplicate-keys",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-computed-properties",
          "visitor": {
            "ObjectExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-for-of",
          "visitor": {
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-sticky-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-dotall-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-spread",
          "visitor": {
            "ArrayExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-parameters",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-destructuring",
          "visitor": {
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoping",
          "visitor": {
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_verified": true,
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-typeof-symbol",
          "visitor": {
            "UnaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-new-target",
          "visitor": {
            "MetaProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "regenerator-transform",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "exit": [
                null
              ]
            },
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectMethod": {
              "exit": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "exit": [
                null
              ]
            },
            "ClassMethod": {
              "exit": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "exit": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-exponentiation-operator",
          "visitor": {
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-async-to-generator",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-async-generator-functions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-unicode-property-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-catch-binding",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CatchClause": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-named-capturing-groups-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/home/rogerio/Repositories/node-metrics/src/NodeMetrics.js",
        "plugins": [
          "dynamicImport",
          "importMeta",
          "jsonStrings",
          "decorators-legacy",
          "classProperties",
          "classPrivateProperties",
          "functionSent",
          "exportNamespaceFrom",
          "numericSeparator",
          "throwExpressions",
          "asyncGenerators",
          "objectRestSpread",
          "jsonStrings",
          "optionalCatchBinding"
        ]
      },
      "generatorOpts": {
        "filename": "/home/rogerio/Repositories/node-metrics/src/NodeMetrics.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/home/rogerio/Repositories/node-metrics/src",
        "sourceFileName": "NodeMetrics.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _influx = require(\"influx\");\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar influx;\n\nvar NodeMetrics =\n/*#__PURE__*/\nfunction () {\n  function NodeMetrics() {\n    _classCallCheck(this, NodeMetrics);\n  }\n\n  _createClass(NodeMetrics, null, [{\n    key: \"connect\",\n    value: function connect(host) {\n      var database = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'node_metrics';\n\n      var createDatabaseIfNotExistant = function createDatabaseIfNotExistant(names) {\n        if (names.includes(database)) {\n          return Promise.resolve();\n        }\n\n        return influx.createDatabase(database);\n      };\n\n      var nullifyInfluxAndLogError = function nullifyInfluxAndLogError(_ref) {\n        var stack = _ref.stack;\n        influx = null;\n        console.error(\"[\".concat(new Date().toISOString(), \"] Unable to connect to InfluxDB: \").concat(stack));\n      };\n\n      influx = new _influx.InfluxDB({\n        host: host,\n        database: database,\n        schema: [{\n          measurement: 'express_response_times',\n          fields: {\n            mean: _influx.FieldType.INTEGER,\n            count: _influx.FieldType.INTEGER,\n            upper: _influx.FieldType.INTEGER,\n            sum: _influx.FieldType.INTEGER\n          },\n          tags: ['path', 'method', 'status_code', 'outcome' //SUCCESS, CLIENT_ERROR, SERVER_ERROR\n          ]\n        }, {\n          measurement: 'promise_response_times',\n          fields: {\n            mean: _influx.FieldType.INTEGER,\n            count: _influx.FieldType.INTEGER,\n            upper: _influx.FieldType.INTEGER,\n            sum: _influx.FieldType.INTEGER\n          },\n          tags: ['asynchronousFunction', 'exception', 'outcome']\n        }, {\n          measurement: 'fetch_response_times',\n          fields: {\n            mean: _influx.FieldType.INTEGER,\n            count: _influx.FieldType.INTEGER,\n            upper: _influx.FieldType.INTEGER,\n            sum: _influx.FieldType.INTEGER\n          },\n          tags: ['url', 'method', 'status_code', 'outcome']\n        }]\n      });\n      return influx.getDatabaseNames().then(createDatabaseIfNotExistant).catch(nullifyInfluxAndLogError);\n    }\n  }, {\n    key: \"sendMetrics\",\n    value: function sendMetrics(measurement, tags, fields) {\n      return influx.writePoints([{\n        measurement: measurement,\n        tags: tags,\n        fields: fields\n      }]).catch(function (err) {\n        return console.error(\"Error saving data to InfluxDB! \".concat(err.stack));\n      });\n    }\n  }, {\n    key: \"expressMetricsMiddleware\",\n    value: function expressMetricsMiddleware(request, response, next) {\n      var start = Date.now();\n\n      var sendExpressMetrics = function sendExpressMetrics() {\n        var duration = Date.now() - start;\n        var count = 1;\n        var mean = duration;\n        var sum = duration;\n        var upper = duration;\n        var fields = {\n          count: count,\n          mean: mean,\n          sum: sum,\n          upper: upper\n        };\n        var path = request.path,\n            method = request.method;\n        var statusCode = response.statusCode;\n        var outcome = statusCode < 400 ? \"SUCCESS\" : statusCode < 500 ? \"CLIENT_ERROR\" : \"SERVER_ERROR\";\n        var tags = {\n          path: path,\n          method: method,\n          status_code: statusCode,\n          outcome: outcome\n        };\n        NodeMetrics.sendMetrics('express_response_times', tags, fields);\n      };\n\n      if (influx) {\n        response.on('finish', sendExpressMetrics);\n      }\n\n      return next();\n    }\n  }, {\n    key: \"metrifyAsynchronousFunction\",\n    value: function metrifyAsynchronousFunction(asynchronousFunction) {\n      var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n        measurement: 'promise_response_times'\n      },\n          measurement = _ref2.measurement;\n\n      var metrifiedAsynchronousFunction = function metrifiedAsynchronousFunction() {\n        var start = Date.now();\n\n        var sendMetrics = function sendMetrics(tags) {\n          var duration = Date.now() - start;\n          var count = 1;\n          var mean = duration;\n          var sum = duration;\n          var upper = duration;\n          var fields = {\n            count: count,\n            mean: mean,\n            sum: sum,\n            upper: upper\n          };\n          NodeMetrics.sendMetrics(measurement, tags, fields);\n        };\n\n        var sendSuccessMetrics = function sendSuccessMetrics(response) {\n          var outcome = 'SUCCESS';\n          var tags = {\n            asynchronousFunction: asynchronousFunction.name,\n            outcome: outcome\n          };\n          sendMetrics(tags);\n          return response;\n        };\n\n        var sendExceptionMetrics = function sendExceptionMetrics(exception) {\n          var outcome = exception instanceof Error ? 'ERROR' : 'EXCEPTION';\n          var exceptionName = exception instanceof Error ? exception.name : exception;\n          var tags = {\n            asynchronousFunction: asynchronousFunction.name,\n            outcome: outcome,\n            exception: exceptionName\n          };\n          sendMetrics(tags);\n          throw exception;\n        };\n\n        return asynchronousFunction.apply(void 0, arguments).then(sendSuccessMetrics).catch(sendExceptionMetrics);\n      };\n\n      if (!influx) {\n        return asynchronousFunction;\n      }\n\n      return metrifiedAsynchronousFunction;\n    }\n  }, {\n    key: \"metrifyFetch\",\n    value: function metrifyFetch(fetch) {\n      var _ref3 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n        measurement: 'fetch_response_times'\n      },\n          measurement = _ref3.measurement;\n\n      var metrifiedFetch = function metrifiedFetch(url) {\n        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        var start = Date.now();\n\n        var sendFetchMetrics = function sendFetchMetrics(response) {\n          var duration = Date.now() - start;\n          var count = 1;\n          var mean = duration;\n          var sum = duration;\n          var upper = duration;\n          var fields = {\n            count: count,\n            mean: mean,\n            sum: sum,\n            upper: upper\n          };\n          var method = options.method || 'GET';\n          var statusCode = response.status;\n          var outcome = statusCode < 400 ? \"SUCCESS\" : statusCode < 500 ? \"CLIENT_ERROR\" : \"SERVER_ERROR\";\n          var tags = {\n            url: url,\n            method: method,\n            status_code: statusCode,\n            outcome: outcome\n          };\n          NodeMetrics.sendMetrics(measurement, tags, fields);\n          return response;\n        };\n\n        for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n          args[_key - 2] = arguments[_key];\n        }\n\n        return fetch.apply(void 0, [url, options].concat(args)).then(sendFetchMetrics);\n      };\n\n      if (!influx) {\n        return fetch;\n      }\n\n      return metrifiedFetch;\n    }\n  }]);\n\n  return NodeMetrics;\n}();\n\nexports.default = NodeMetrics;\n\nif (process.env.NODE_METRICS_HOST) {\n  NodeMetrics.connect(process.env.NODE_METRICS_HOST, process.env.NODE_METRICS_DATABASE);\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,",
    "map": {
      "version": 3,
      "sources": [
        "NodeMetrics.js"
      ],
      "names": [
        "influx",
        "NodeMetrics",
        "host",
        "database",
        "createDatabaseIfNotExistant",
        "names",
        "includes",
        "Promise",
        "resolve",
        "createDatabase",
        "nullifyInfluxAndLogError",
        "stack",
        "console",
        "error",
        "Date",
        "toISOString",
        "InfluxDB",
        "schema",
        "measurement",
        "fields",
        "mean",
        "FieldType",
        "INTEGER",
        "count",
        "upper",
        "sum",
        "tags",
        "getDatabaseNames",
        "then",
        "catch",
        "writePoints",
        "err",
        "request",
        "response",
        "next",
        "start",
        "now",
        "sendExpressMetrics",
        "duration",
        "path",
        "method",
        "statusCode",
        "outcome",
        "status_code",
        "sendMetrics",
        "on",
        "asynchronousFunction",
        "metrifiedAsynchronousFunction",
        "sendSuccessMetrics",
        "name",
        "sendExceptionMetrics",
        "exception",
        "Error",
        "exceptionName",
        "fetch",
        "metrifiedFetch",
        "url",
        "options",
        "sendFetchMetrics",
        "status",
        "args",
        "process",
        "env",
        "NODE_METRICS_HOST",
        "connect",
        "NODE_METRICS_DATABASE"
      ],
      "mappings": "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",
      "sourceRoot": "/home/rogerio/Repositories/node-metrics/src",
      "sourcesContent": [
        "//REQUIRES body-parser\nimport {InfluxDB, FieldType} from 'influx'\n\nlet influx\n\nexport default class NodeMetrics {\n    static connect(host, database = 'node_metrics') {\n        const createDatabaseIfNotExistant = names => {\n            if(names.includes(database)) {\n                return Promise.resolve()\n            }\n            return influx.createDatabase(database)\n        }\n        const nullifyInfluxAndLogError = ({stack}) => {\n            influx = null\n            console.error(`[${(new Date()).toISOString()}] Unable to connect to InfluxDB: ${stack}`)\n        }\n\n        influx = new InfluxDB({\n            host,\n            database,\n            schema: [\n                {\n                    measurement: 'express_response_times',\n                    fields: {\n                        mean: FieldType.INTEGER,\n                        count: FieldType.INTEGER,\n                        upper: FieldType.INTEGER,\n                        sum: FieldType.INTEGER,\n                    },\n                    tags: [\n                        'path',\n                        'method',\n                        'status_code',\n                        'outcome' //SUCCESS, CLIENT_ERROR, SERVER_ERROR\n                    ]\n                },\n                {\n                    measurement: 'promise_response_times',\n                    fields: {\n                        mean: FieldType.INTEGER,\n                        count: FieldType.INTEGER,\n                        upper: FieldType.INTEGER,\n                        sum: FieldType.INTEGER,\n                    },\n                    tags: [\n                        'asynchronousFunction',\n                        'exception',\n                        'outcome'\n                    ]\n                },\n                {\n                    measurement: 'fetch_response_times',\n                    fields: {\n                        mean: FieldType.INTEGER,\n                        count: FieldType.INTEGER,\n                        upper: FieldType.INTEGER,\n                        sum: FieldType.INTEGER,\n                    },\n                    tags: [\n                        'url',\n                        'method',\n                        'status_code',\n                        'outcome'\n                    ]\n                }\n            ]\n        })\n\n        return influx.getDatabaseNames()\n            .then(createDatabaseIfNotExistant)\n            .catch(nullifyInfluxAndLogError) \n    }\n\n    static sendMetrics(measurement, tags, fields) {\n        return influx.writePoints([{ measurement, tags, fields }])\n            .catch(err => console.error(`Error saving data to InfluxDB! ${err.stack}`))\n    }\n\n    static expressMetricsMiddleware(request, response, next) {\n        const start = Date.now()\n        const sendExpressMetrics = () => {\n            const duration = Date.now() - start\n            const count = 1\n            const mean = duration\n            const sum = duration\n            const upper = duration\n            const fields = {\n                count,\n                mean,\n                sum,\n                upper\n            }\n            const { path, method } = request\n            const { statusCode } = response\n            const outcome = statusCode < 400 ? ( \n                \"SUCCESS\"\n                ) : ( \n                statusCode < 500 ? ( \n                    \"CLIENT_ERROR\"\n                    ) : (\n                    \"SERVER_ERROR\"\n                )\n            )\n            const tags = {\n                path, \n                method, \n                status_code: statusCode,\n                outcome\n            }\n\n            NodeMetrics.sendMetrics('express_response_times', tags, fields)\n        }\n\n        if (influx) {\n            response.on('finish', sendExpressMetrics)\n        }\n\n        return next()\n    }\n\n    static metrifyAsynchronousFunction(\n        asynchronousFunction, \n        { \n            measurement\n        } = {\n            measurement: 'promise_response_times'\n        }\n    ) {\n        const metrifiedAsynchronousFunction = (...args) => {\n            const start = Date.now()\n            const sendMetrics = (tags) => {\n                const duration = Date.now() - start \n                const count = 1\n                const mean = duration\n                const sum = duration\n                const upper = duration\n                const fields = {\n                    count,\n                    mean,\n                    sum,\n                    upper\n                }\n                NodeMetrics.sendMetrics(measurement, tags, fields)\n            }\n            const sendSuccessMetrics = response => {\n                const outcome = 'SUCCESS'\n                const tags = {\n                    asynchronousFunction: asynchronousFunction.name,\n                    outcome\n                }\n                sendMetrics(tags)\n                return response\n            }\n            const sendExceptionMetrics = exception => {\n                const outcome = exception instanceof Error ? (\n                    'ERROR'\n                    ) : (\n                    'EXCEPTION'\n                )\n                const exceptionName = exception instanceof Error ? (\n                    exception.name\n                    ) : (\n                    exception\n                )\n                const tags = {\n                    asynchronousFunction: asynchronousFunction.name,\n                    outcome,\n                    exception: exceptionName\n                }\n                sendMetrics(tags)\n                throw exception\n            }\n\n            return asynchronousFunction(...args)\n                .then(sendSuccessMetrics)\n                .catch(sendExceptionMetrics)\n        }\n\n        if(!influx) {\n            return asynchronousFunction\n        }\n        return metrifiedAsynchronousFunction\n    }\n\n    static metrifyFetch(\n        fetch, \n        {\n            measurement\n        } = {\n            measurement: 'fetch_response_times'\n        }\n    ) {\n        const metrifiedFetch = (url, options = {}, ...args) => {\n            const start = Date.now()\n            const sendFetchMetrics = response => {\n                const duration = Date.now() - start \n                const count = 1\n                const mean = duration\n                const sum = duration\n                const upper = duration\n                const fields = {\n                    count,\n                    mean,\n                    sum,\n                    upper\n                }\n                const method = options.method || 'GET'\n                const statusCode = response.status\n                const outcome = statusCode < 400 ? ( \n                    \"SUCCESS\"\n                    ) : ( \n                    statusCode < 500 ? ( \n                        \"CLIENT_ERROR\"\n                        ) : (\n                        \"SERVER_ERROR\"\n                    )\n                )\n                const tags = {\n                    url, \n                    method,\n                    status_code: statusCode,\n                    outcome\n                }\n                NodeMetrics.sendMetrics(measurement, tags, fields)\n\n                return response\n            }\n\n            return fetch(url, options, ...args)\n            .then(sendFetchMetrics)\n        }\n\n        if(!influx) {\n            return fetch\n        }\n        return metrifiedFetch\n    }\n}\n\nif(process.env.NODE_METRICS_HOST) {\n    NodeMetrics.connect(process.env.NODE_METRICS_HOST, process.env.NODE_METRICS_DATABASE)    \n}\n"
      ]
    },
    "sourceType": "script",
    "mtime": 1551466618442
  }
}